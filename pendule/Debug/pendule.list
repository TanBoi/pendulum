
pendule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08003744  08003744  00013744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003794  08003794  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003794  08003794  00013794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800379c  0800379c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800379c  0800379c  0001379c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037a0  080037a0  000137a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080037a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000070  08003814  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08003814  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa70  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001943  00000000  00000000  0002ab10  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c10  00000000  00000000  0002c458  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b38  00000000  00000000  0002d068  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015ed8  00000000  00000000  0002dba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008824  00000000  00000000  00043a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000908f0  00000000  00000000  0004c29c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dcb8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036a8  00000000  00000000  000dcc08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800372c 	.word	0x0800372c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800372c 	.word	0x0800372c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_d2iz>:
 8000608:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800060c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000610:	d215      	bcs.n	800063e <__aeabi_d2iz+0x36>
 8000612:	d511      	bpl.n	8000638 <__aeabi_d2iz+0x30>
 8000614:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000618:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800061c:	d912      	bls.n	8000644 <__aeabi_d2iz+0x3c>
 800061e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000622:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000626:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800062a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800062e:	fa23 f002 	lsr.w	r0, r3, r2
 8000632:	bf18      	it	ne
 8000634:	4240      	negne	r0, r0
 8000636:	4770      	bx	lr
 8000638:	f04f 0000 	mov.w	r0, #0
 800063c:	4770      	bx	lr
 800063e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000642:	d105      	bne.n	8000650 <__aeabi_d2iz+0x48>
 8000644:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000648:	bf08      	it	eq
 800064a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800064e:	4770      	bx	lr
 8000650:	f04f 0000 	mov.w	r0, #0
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop

08000658 <__aeabi_uldivmod>:
 8000658:	b953      	cbnz	r3, 8000670 <__aeabi_uldivmod+0x18>
 800065a:	b94a      	cbnz	r2, 8000670 <__aeabi_uldivmod+0x18>
 800065c:	2900      	cmp	r1, #0
 800065e:	bf08      	it	eq
 8000660:	2800      	cmpeq	r0, #0
 8000662:	bf1c      	itt	ne
 8000664:	f04f 31ff 	movne.w	r1, #4294967295
 8000668:	f04f 30ff 	movne.w	r0, #4294967295
 800066c:	f000 b972 	b.w	8000954 <__aeabi_idiv0>
 8000670:	f1ad 0c08 	sub.w	ip, sp, #8
 8000674:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000678:	f000 f806 	bl	8000688 <__udivmoddi4>
 800067c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000680:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000684:	b004      	add	sp, #16
 8000686:	4770      	bx	lr

08000688 <__udivmoddi4>:
 8000688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800068c:	9e08      	ldr	r6, [sp, #32]
 800068e:	4604      	mov	r4, r0
 8000690:	4688      	mov	r8, r1
 8000692:	2b00      	cmp	r3, #0
 8000694:	d14b      	bne.n	800072e <__udivmoddi4+0xa6>
 8000696:	428a      	cmp	r2, r1
 8000698:	4615      	mov	r5, r2
 800069a:	d967      	bls.n	800076c <__udivmoddi4+0xe4>
 800069c:	fab2 f282 	clz	r2, r2
 80006a0:	b14a      	cbz	r2, 80006b6 <__udivmoddi4+0x2e>
 80006a2:	f1c2 0720 	rsb	r7, r2, #32
 80006a6:	fa01 f302 	lsl.w	r3, r1, r2
 80006aa:	fa20 f707 	lsr.w	r7, r0, r7
 80006ae:	4095      	lsls	r5, r2
 80006b0:	ea47 0803 	orr.w	r8, r7, r3
 80006b4:	4094      	lsls	r4, r2
 80006b6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006ba:	0c23      	lsrs	r3, r4, #16
 80006bc:	fbb8 f7fe 	udiv	r7, r8, lr
 80006c0:	fa1f fc85 	uxth.w	ip, r5
 80006c4:	fb0e 8817 	mls	r8, lr, r7, r8
 80006c8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006cc:	fb07 f10c 	mul.w	r1, r7, ip
 80006d0:	4299      	cmp	r1, r3
 80006d2:	d909      	bls.n	80006e8 <__udivmoddi4+0x60>
 80006d4:	18eb      	adds	r3, r5, r3
 80006d6:	f107 30ff 	add.w	r0, r7, #4294967295
 80006da:	f080 811b 	bcs.w	8000914 <__udivmoddi4+0x28c>
 80006de:	4299      	cmp	r1, r3
 80006e0:	f240 8118 	bls.w	8000914 <__udivmoddi4+0x28c>
 80006e4:	3f02      	subs	r7, #2
 80006e6:	442b      	add	r3, r5
 80006e8:	1a5b      	subs	r3, r3, r1
 80006ea:	b2a4      	uxth	r4, r4
 80006ec:	fbb3 f0fe 	udiv	r0, r3, lr
 80006f0:	fb0e 3310 	mls	r3, lr, r0, r3
 80006f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006f8:	fb00 fc0c 	mul.w	ip, r0, ip
 80006fc:	45a4      	cmp	ip, r4
 80006fe:	d909      	bls.n	8000714 <__udivmoddi4+0x8c>
 8000700:	192c      	adds	r4, r5, r4
 8000702:	f100 33ff 	add.w	r3, r0, #4294967295
 8000706:	f080 8107 	bcs.w	8000918 <__udivmoddi4+0x290>
 800070a:	45a4      	cmp	ip, r4
 800070c:	f240 8104 	bls.w	8000918 <__udivmoddi4+0x290>
 8000710:	3802      	subs	r0, #2
 8000712:	442c      	add	r4, r5
 8000714:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000718:	eba4 040c 	sub.w	r4, r4, ip
 800071c:	2700      	movs	r7, #0
 800071e:	b11e      	cbz	r6, 8000728 <__udivmoddi4+0xa0>
 8000720:	40d4      	lsrs	r4, r2
 8000722:	2300      	movs	r3, #0
 8000724:	e9c6 4300 	strd	r4, r3, [r6]
 8000728:	4639      	mov	r1, r7
 800072a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800072e:	428b      	cmp	r3, r1
 8000730:	d909      	bls.n	8000746 <__udivmoddi4+0xbe>
 8000732:	2e00      	cmp	r6, #0
 8000734:	f000 80eb 	beq.w	800090e <__udivmoddi4+0x286>
 8000738:	2700      	movs	r7, #0
 800073a:	e9c6 0100 	strd	r0, r1, [r6]
 800073e:	4638      	mov	r0, r7
 8000740:	4639      	mov	r1, r7
 8000742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000746:	fab3 f783 	clz	r7, r3
 800074a:	2f00      	cmp	r7, #0
 800074c:	d147      	bne.n	80007de <__udivmoddi4+0x156>
 800074e:	428b      	cmp	r3, r1
 8000750:	d302      	bcc.n	8000758 <__udivmoddi4+0xd0>
 8000752:	4282      	cmp	r2, r0
 8000754:	f200 80fa 	bhi.w	800094c <__udivmoddi4+0x2c4>
 8000758:	1a84      	subs	r4, r0, r2
 800075a:	eb61 0303 	sbc.w	r3, r1, r3
 800075e:	2001      	movs	r0, #1
 8000760:	4698      	mov	r8, r3
 8000762:	2e00      	cmp	r6, #0
 8000764:	d0e0      	beq.n	8000728 <__udivmoddi4+0xa0>
 8000766:	e9c6 4800 	strd	r4, r8, [r6]
 800076a:	e7dd      	b.n	8000728 <__udivmoddi4+0xa0>
 800076c:	b902      	cbnz	r2, 8000770 <__udivmoddi4+0xe8>
 800076e:	deff      	udf	#255	; 0xff
 8000770:	fab2 f282 	clz	r2, r2
 8000774:	2a00      	cmp	r2, #0
 8000776:	f040 808f 	bne.w	8000898 <__udivmoddi4+0x210>
 800077a:	1b49      	subs	r1, r1, r5
 800077c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000780:	fa1f f885 	uxth.w	r8, r5
 8000784:	2701      	movs	r7, #1
 8000786:	fbb1 fcfe 	udiv	ip, r1, lr
 800078a:	0c23      	lsrs	r3, r4, #16
 800078c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000790:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000794:	fb08 f10c 	mul.w	r1, r8, ip
 8000798:	4299      	cmp	r1, r3
 800079a:	d907      	bls.n	80007ac <__udivmoddi4+0x124>
 800079c:	18eb      	adds	r3, r5, r3
 800079e:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007a2:	d202      	bcs.n	80007aa <__udivmoddi4+0x122>
 80007a4:	4299      	cmp	r1, r3
 80007a6:	f200 80cd 	bhi.w	8000944 <__udivmoddi4+0x2bc>
 80007aa:	4684      	mov	ip, r0
 80007ac:	1a59      	subs	r1, r3, r1
 80007ae:	b2a3      	uxth	r3, r4
 80007b0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007b4:	fb0e 1410 	mls	r4, lr, r0, r1
 80007b8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80007bc:	fb08 f800 	mul.w	r8, r8, r0
 80007c0:	45a0      	cmp	r8, r4
 80007c2:	d907      	bls.n	80007d4 <__udivmoddi4+0x14c>
 80007c4:	192c      	adds	r4, r5, r4
 80007c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80007ca:	d202      	bcs.n	80007d2 <__udivmoddi4+0x14a>
 80007cc:	45a0      	cmp	r8, r4
 80007ce:	f200 80b6 	bhi.w	800093e <__udivmoddi4+0x2b6>
 80007d2:	4618      	mov	r0, r3
 80007d4:	eba4 0408 	sub.w	r4, r4, r8
 80007d8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007dc:	e79f      	b.n	800071e <__udivmoddi4+0x96>
 80007de:	f1c7 0c20 	rsb	ip, r7, #32
 80007e2:	40bb      	lsls	r3, r7
 80007e4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80007e8:	ea4e 0e03 	orr.w	lr, lr, r3
 80007ec:	fa01 f407 	lsl.w	r4, r1, r7
 80007f0:	fa20 f50c 	lsr.w	r5, r0, ip
 80007f4:	fa21 f30c 	lsr.w	r3, r1, ip
 80007f8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80007fc:	4325      	orrs	r5, r4
 80007fe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000802:	0c2c      	lsrs	r4, r5, #16
 8000804:	fb08 3319 	mls	r3, r8, r9, r3
 8000808:	fa1f fa8e 	uxth.w	sl, lr
 800080c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000810:	fb09 f40a 	mul.w	r4, r9, sl
 8000814:	429c      	cmp	r4, r3
 8000816:	fa02 f207 	lsl.w	r2, r2, r7
 800081a:	fa00 f107 	lsl.w	r1, r0, r7
 800081e:	d90b      	bls.n	8000838 <__udivmoddi4+0x1b0>
 8000820:	eb1e 0303 	adds.w	r3, lr, r3
 8000824:	f109 30ff 	add.w	r0, r9, #4294967295
 8000828:	f080 8087 	bcs.w	800093a <__udivmoddi4+0x2b2>
 800082c:	429c      	cmp	r4, r3
 800082e:	f240 8084 	bls.w	800093a <__udivmoddi4+0x2b2>
 8000832:	f1a9 0902 	sub.w	r9, r9, #2
 8000836:	4473      	add	r3, lr
 8000838:	1b1b      	subs	r3, r3, r4
 800083a:	b2ad      	uxth	r5, r5
 800083c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000840:	fb08 3310 	mls	r3, r8, r0, r3
 8000844:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000848:	fb00 fa0a 	mul.w	sl, r0, sl
 800084c:	45a2      	cmp	sl, r4
 800084e:	d908      	bls.n	8000862 <__udivmoddi4+0x1da>
 8000850:	eb1e 0404 	adds.w	r4, lr, r4
 8000854:	f100 33ff 	add.w	r3, r0, #4294967295
 8000858:	d26b      	bcs.n	8000932 <__udivmoddi4+0x2aa>
 800085a:	45a2      	cmp	sl, r4
 800085c:	d969      	bls.n	8000932 <__udivmoddi4+0x2aa>
 800085e:	3802      	subs	r0, #2
 8000860:	4474      	add	r4, lr
 8000862:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000866:	fba0 8902 	umull	r8, r9, r0, r2
 800086a:	eba4 040a 	sub.w	r4, r4, sl
 800086e:	454c      	cmp	r4, r9
 8000870:	46c2      	mov	sl, r8
 8000872:	464b      	mov	r3, r9
 8000874:	d354      	bcc.n	8000920 <__udivmoddi4+0x298>
 8000876:	d051      	beq.n	800091c <__udivmoddi4+0x294>
 8000878:	2e00      	cmp	r6, #0
 800087a:	d069      	beq.n	8000950 <__udivmoddi4+0x2c8>
 800087c:	ebb1 050a 	subs.w	r5, r1, sl
 8000880:	eb64 0403 	sbc.w	r4, r4, r3
 8000884:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000888:	40fd      	lsrs	r5, r7
 800088a:	40fc      	lsrs	r4, r7
 800088c:	ea4c 0505 	orr.w	r5, ip, r5
 8000890:	e9c6 5400 	strd	r5, r4, [r6]
 8000894:	2700      	movs	r7, #0
 8000896:	e747      	b.n	8000728 <__udivmoddi4+0xa0>
 8000898:	f1c2 0320 	rsb	r3, r2, #32
 800089c:	fa20 f703 	lsr.w	r7, r0, r3
 80008a0:	4095      	lsls	r5, r2
 80008a2:	fa01 f002 	lsl.w	r0, r1, r2
 80008a6:	fa21 f303 	lsr.w	r3, r1, r3
 80008aa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80008ae:	4338      	orrs	r0, r7
 80008b0:	0c01      	lsrs	r1, r0, #16
 80008b2:	fbb3 f7fe 	udiv	r7, r3, lr
 80008b6:	fa1f f885 	uxth.w	r8, r5
 80008ba:	fb0e 3317 	mls	r3, lr, r7, r3
 80008be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008c2:	fb07 f308 	mul.w	r3, r7, r8
 80008c6:	428b      	cmp	r3, r1
 80008c8:	fa04 f402 	lsl.w	r4, r4, r2
 80008cc:	d907      	bls.n	80008de <__udivmoddi4+0x256>
 80008ce:	1869      	adds	r1, r5, r1
 80008d0:	f107 3cff 	add.w	ip, r7, #4294967295
 80008d4:	d22f      	bcs.n	8000936 <__udivmoddi4+0x2ae>
 80008d6:	428b      	cmp	r3, r1
 80008d8:	d92d      	bls.n	8000936 <__udivmoddi4+0x2ae>
 80008da:	3f02      	subs	r7, #2
 80008dc:	4429      	add	r1, r5
 80008de:	1acb      	subs	r3, r1, r3
 80008e0:	b281      	uxth	r1, r0
 80008e2:	fbb3 f0fe 	udiv	r0, r3, lr
 80008e6:	fb0e 3310 	mls	r3, lr, r0, r3
 80008ea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008ee:	fb00 f308 	mul.w	r3, r0, r8
 80008f2:	428b      	cmp	r3, r1
 80008f4:	d907      	bls.n	8000906 <__udivmoddi4+0x27e>
 80008f6:	1869      	adds	r1, r5, r1
 80008f8:	f100 3cff 	add.w	ip, r0, #4294967295
 80008fc:	d217      	bcs.n	800092e <__udivmoddi4+0x2a6>
 80008fe:	428b      	cmp	r3, r1
 8000900:	d915      	bls.n	800092e <__udivmoddi4+0x2a6>
 8000902:	3802      	subs	r0, #2
 8000904:	4429      	add	r1, r5
 8000906:	1ac9      	subs	r1, r1, r3
 8000908:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800090c:	e73b      	b.n	8000786 <__udivmoddi4+0xfe>
 800090e:	4637      	mov	r7, r6
 8000910:	4630      	mov	r0, r6
 8000912:	e709      	b.n	8000728 <__udivmoddi4+0xa0>
 8000914:	4607      	mov	r7, r0
 8000916:	e6e7      	b.n	80006e8 <__udivmoddi4+0x60>
 8000918:	4618      	mov	r0, r3
 800091a:	e6fb      	b.n	8000714 <__udivmoddi4+0x8c>
 800091c:	4541      	cmp	r1, r8
 800091e:	d2ab      	bcs.n	8000878 <__udivmoddi4+0x1f0>
 8000920:	ebb8 0a02 	subs.w	sl, r8, r2
 8000924:	eb69 020e 	sbc.w	r2, r9, lr
 8000928:	3801      	subs	r0, #1
 800092a:	4613      	mov	r3, r2
 800092c:	e7a4      	b.n	8000878 <__udivmoddi4+0x1f0>
 800092e:	4660      	mov	r0, ip
 8000930:	e7e9      	b.n	8000906 <__udivmoddi4+0x27e>
 8000932:	4618      	mov	r0, r3
 8000934:	e795      	b.n	8000862 <__udivmoddi4+0x1da>
 8000936:	4667      	mov	r7, ip
 8000938:	e7d1      	b.n	80008de <__udivmoddi4+0x256>
 800093a:	4681      	mov	r9, r0
 800093c:	e77c      	b.n	8000838 <__udivmoddi4+0x1b0>
 800093e:	3802      	subs	r0, #2
 8000940:	442c      	add	r4, r5
 8000942:	e747      	b.n	80007d4 <__udivmoddi4+0x14c>
 8000944:	f1ac 0c02 	sub.w	ip, ip, #2
 8000948:	442b      	add	r3, r5
 800094a:	e72f      	b.n	80007ac <__udivmoddi4+0x124>
 800094c:	4638      	mov	r0, r7
 800094e:	e708      	b.n	8000762 <__udivmoddi4+0xda>
 8000950:	4637      	mov	r7, r6
 8000952:	e6e9      	b.n	8000728 <__udivmoddi4+0xa0>

08000954 <__aeabi_idiv0>:
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop

08000958 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800095c:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <HAL_Init+0x40>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a0d      	ldr	r2, [pc, #52]	; (8000998 <HAL_Init+0x40>)
 8000962:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000966:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000968:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <HAL_Init+0x40>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <HAL_Init+0x40>)
 800096e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000972:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <HAL_Init+0x40>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a07      	ldr	r2, [pc, #28]	; (8000998 <HAL_Init+0x40>)
 800097a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800097e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000980:	2003      	movs	r0, #3
 8000982:	f000 fba7 	bl	80010d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000986:	2000      	movs	r0, #0
 8000988:	f000 f808 	bl	800099c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800098c:	f002 f8c4 	bl	8002b18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000990:	2300      	movs	r3, #0
}
 8000992:	4618      	mov	r0, r3
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023c00 	.word	0x40023c00

0800099c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <HAL_InitTick+0x54>)
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <HAL_InitTick+0x58>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	4619      	mov	r1, r3
 80009ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ba:	4618      	mov	r0, r3
 80009bc:	f000 fbb1 	bl	8001122 <HAL_SYSTICK_Config>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
 80009c8:	e00e      	b.n	80009e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2b0f      	cmp	r3, #15
 80009ce:	d80a      	bhi.n	80009e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d0:	2200      	movs	r2, #0
 80009d2:	6879      	ldr	r1, [r7, #4]
 80009d4:	f04f 30ff 	mov.w	r0, #4294967295
 80009d8:	f000 fb87 	bl	80010ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009dc:	4a06      	ldr	r2, [pc, #24]	; (80009f8 <HAL_InitTick+0x5c>)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009e2:	2300      	movs	r3, #0
 80009e4:	e000      	b.n	80009e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000008 	.word	0x20000008
 80009f4:	20000004 	.word	0x20000004
 80009f8:	20000000 	.word	0x20000000

080009fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <HAL_IncTick+0x20>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	461a      	mov	r2, r3
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <HAL_IncTick+0x24>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <HAL_IncTick+0x24>)
 8000a0e:	6013      	str	r3, [r2, #0]
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	20000004 	.word	0x20000004
 8000a20:	20000098 	.word	0x20000098

08000a24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  return uwTick;
 8000a28:	4b03      	ldr	r3, [pc, #12]	; (8000a38 <HAL_GetTick+0x14>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	20000098 	.word	0x20000098

08000a3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a44:	f7ff ffee 	bl	8000a24 <HAL_GetTick>
 8000a48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a54:	d005      	beq.n	8000a62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <HAL_Delay+0x40>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	4413      	add	r3, r2
 8000a60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a62:	bf00      	nop
 8000a64:	f7ff ffde 	bl	8000a24 <HAL_GetTick>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	68fa      	ldr	r2, [r7, #12]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d8f7      	bhi.n	8000a64 <HAL_Delay+0x28>
  {
  }
}
 8000a74:	bf00      	nop
 8000a76:	3710      	adds	r7, #16
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000004 	.word	0x20000004

08000a80 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d101      	bne.n	8000a96 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
 8000a94:	e033      	b.n	8000afe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d109      	bne.n	8000ab2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f002 f862 	bl	8002b68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2200      	movs	r2, #0
 8000aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	f003 0310 	and.w	r3, r3, #16
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d118      	bne.n	8000af0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ac6:	f023 0302 	bic.w	r3, r3, #2
 8000aca:	f043 0202 	orr.w	r2, r3, #2
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f000 f950 	bl	8000d78 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2200      	movs	r2, #0
 8000adc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	f023 0303 	bic.w	r3, r3, #3
 8000ae6:	f043 0201 	orr.w	r2, r3, #1
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	641a      	str	r2, [r3, #64]	; 0x40
 8000aee:	e001      	b.n	8000af4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000af0:	2301      	movs	r3, #1
 8000af2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2200      	movs	r2, #0
 8000af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000b10:	2300      	movs	r3, #0
 8000b12:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d101      	bne.n	8000b22 <HAL_ADC_Start+0x1a>
 8000b1e:	2302      	movs	r3, #2
 8000b20:	e08a      	b.n	8000c38 <HAL_ADC_Start+0x130>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2201      	movs	r2, #1
 8000b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	f003 0301 	and.w	r3, r3, #1
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d018      	beq.n	8000b6a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	689a      	ldr	r2, [r3, #8]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f042 0201 	orr.w	r2, r2, #1
 8000b46:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000b48:	4b3e      	ldr	r3, [pc, #248]	; (8000c44 <HAL_ADC_Start+0x13c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a3e      	ldr	r2, [pc, #248]	; (8000c48 <HAL_ADC_Start+0x140>)
 8000b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b52:	0c9a      	lsrs	r2, r3, #18
 8000b54:	4613      	mov	r3, r2
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	4413      	add	r3, r2
 8000b5a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000b5c:	e002      	b.n	8000b64 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	3b01      	subs	r3, #1
 8000b62:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d1f9      	bne.n	8000b5e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	f003 0301 	and.w	r3, r3, #1
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d15e      	bne.n	8000c36 <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b80:	f023 0301 	bic.w	r3, r3, #1
 8000b84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d007      	beq.n	8000baa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ba2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000bb6:	d106      	bne.n	8000bc6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbc:	f023 0206 	bic.w	r2, r3, #6
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	645a      	str	r2, [r3, #68]	; 0x44
 8000bc4:	e002      	b.n	8000bcc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000bd4:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <HAL_ADC_Start+0x144>)
 8000bd6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000be0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f003 031f 	and.w	r3, r3, #31
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d10f      	bne.n	8000c0e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d11c      	bne.n	8000c36 <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	689a      	ldr	r2, [r3, #8]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	e013      	b.n	8000c36 <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a0f      	ldr	r2, [pc, #60]	; (8000c50 <HAL_ADC_Start+0x148>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d10e      	bne.n	8000c36 <HAL_ADC_Start+0x12e>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d107      	bne.n	8000c36 <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	689a      	ldr	r2, [r3, #8]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000c34:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8000c36:	2300      	movs	r3, #0
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3714      	adds	r7, #20
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	20000008 	.word	0x20000008
 8000c48:	431bde83 	.word	0x431bde83
 8000c4c:	40012300 	.word	0x40012300
 8000c50:	40012000 	.word	0x40012000

08000c54 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c70:	d113      	bne.n	8000c9a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000c7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c80:	d10b      	bne.n	8000c9a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	f043 0220 	orr.w	r2, r3, #32
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2200      	movs	r2, #0
 8000c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e05c      	b.n	8000d54 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000c9a:	f7ff fec3 	bl	8000a24 <HAL_GetTick>
 8000c9e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000ca0:	e01a      	b.n	8000cd8 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ca8:	d016      	beq.n	8000cd8 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d007      	beq.n	8000cc0 <HAL_ADC_PollForConversion+0x6c>
 8000cb0:	f7ff feb8 	bl	8000a24 <HAL_GetTick>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	683a      	ldr	r2, [r7, #0]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d20b      	bcs.n	8000cd8 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc4:	f043 0204 	orr.w	r2, r3, #4
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	e03d      	b.n	8000d54 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d1dd      	bne.n	8000ca2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f06f 0212 	mvn.w	r2, #18
 8000cee:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d123      	bne.n	8000d52 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d11f      	bne.n	8000d52 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d18:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d006      	beq.n	8000d2e <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d111      	bne.n	8000d52 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d105      	bne.n	8000d52 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	f043 0201 	orr.w	r2, r3, #1
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000d52:	2300      	movs	r3, #0
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
	...

08000d78 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d80:	4b79      	ldr	r3, [pc, #484]	; (8000f68 <ADC_Init+0x1f0>)
 8000d82:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	685a      	ldr	r2, [r3, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	431a      	orrs	r2, r3
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	685a      	ldr	r2, [r3, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000dac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	6859      	ldr	r1, [r3, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	691b      	ldr	r3, [r3, #16]
 8000db8:	021a      	lsls	r2, r3, #8
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	430a      	orrs	r2, r1
 8000dc0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	685a      	ldr	r2, [r3, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000dd0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	6859      	ldr	r1, [r3, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	689a      	ldr	r2, [r3, #8]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	430a      	orrs	r2, r1
 8000de2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	689a      	ldr	r2, [r3, #8]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000df2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	6899      	ldr	r1, [r3, #8]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	68da      	ldr	r2, [r3, #12]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	430a      	orrs	r2, r1
 8000e04:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e0a:	4a58      	ldr	r2, [pc, #352]	; (8000f6c <ADC_Init+0x1f4>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d022      	beq.n	8000e56 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	689a      	ldr	r2, [r3, #8]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000e1e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	6899      	ldr	r1, [r3, #8]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	430a      	orrs	r2, r1
 8000e30:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	689a      	ldr	r2, [r3, #8]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	6899      	ldr	r1, [r3, #8]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	430a      	orrs	r2, r1
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	e00f      	b.n	8000e76 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	689a      	ldr	r2, [r3, #8]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000e64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	689a      	ldr	r2, [r3, #8]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e74:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f022 0202 	bic.w	r2, r2, #2
 8000e84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	6899      	ldr	r1, [r3, #8]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	7e1b      	ldrb	r3, [r3, #24]
 8000e90:	005a      	lsls	r2, r3, #1
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	430a      	orrs	r2, r1
 8000e98:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d01b      	beq.n	8000edc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	685a      	ldr	r2, [r3, #4]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000eb2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	685a      	ldr	r2, [r3, #4]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000ec2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	6859      	ldr	r1, [r3, #4]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	035a      	lsls	r2, r3, #13
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	430a      	orrs	r2, r1
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	e007      	b.n	8000eec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	685a      	ldr	r2, [r3, #4]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000eea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000efa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	3b01      	subs	r3, #1
 8000f08:	051a      	lsls	r2, r3, #20
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	430a      	orrs	r2, r1
 8000f10:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	689a      	ldr	r2, [r3, #8]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000f20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	6899      	ldr	r1, [r3, #8]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f2e:	025a      	lsls	r2, r3, #9
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	430a      	orrs	r2, r1
 8000f36:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	689a      	ldr	r2, [r3, #8]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	6899      	ldr	r1, [r3, #8]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	029a      	lsls	r2, r3, #10
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	609a      	str	r2, [r3, #8]
}
 8000f5c:	bf00      	nop
 8000f5e:	3714      	adds	r7, #20
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	40012300 	.word	0x40012300
 8000f6c:	0f000001 	.word	0x0f000001

08000f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa2:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	60d3      	str	r3, [r2, #12]
}
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	0a1b      	lsrs	r3, r3, #8
 8000fc2:	f003 0307 	and.w	r3, r3, #7
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	6039      	str	r1, [r7, #0]
 8000fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	db0a      	blt.n	8000ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	490c      	ldr	r1, [pc, #48]	; (8001020 <__NVIC_SetPriority+0x4c>)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	0112      	lsls	r2, r2, #4
 8000ff4:	b2d2      	uxtb	r2, r2
 8000ff6:	440b      	add	r3, r1
 8000ff8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ffc:	e00a      	b.n	8001014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4908      	ldr	r1, [pc, #32]	; (8001024 <__NVIC_SetPriority+0x50>)
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	f003 030f 	and.w	r3, r3, #15
 800100a:	3b04      	subs	r3, #4
 800100c:	0112      	lsls	r2, r2, #4
 800100e:	b2d2      	uxtb	r2, r2
 8001010:	440b      	add	r3, r1
 8001012:	761a      	strb	r2, [r3, #24]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000e100 	.word	0xe000e100
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001028:	b480      	push	{r7}
 800102a:	b089      	sub	sp, #36	; 0x24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f1c3 0307 	rsb	r3, r3, #7
 8001042:	2b04      	cmp	r3, #4
 8001044:	bf28      	it	cs
 8001046:	2304      	movcs	r3, #4
 8001048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3304      	adds	r3, #4
 800104e:	2b06      	cmp	r3, #6
 8001050:	d902      	bls.n	8001058 <NVIC_EncodePriority+0x30>
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3b03      	subs	r3, #3
 8001056:	e000      	b.n	800105a <NVIC_EncodePriority+0x32>
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800105c:	f04f 32ff 	mov.w	r2, #4294967295
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43da      	mvns	r2, r3
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	401a      	ands	r2, r3
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001070:	f04f 31ff 	mov.w	r1, #4294967295
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	fa01 f303 	lsl.w	r3, r1, r3
 800107a:	43d9      	mvns	r1, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001080:	4313      	orrs	r3, r2
         );
}
 8001082:	4618      	mov	r0, r3
 8001084:	3724      	adds	r7, #36	; 0x24
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
	...

08001090 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3b01      	subs	r3, #1
 800109c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010a0:	d301      	bcc.n	80010a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010a2:	2301      	movs	r3, #1
 80010a4:	e00f      	b.n	80010c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a6:	4a0a      	ldr	r2, [pc, #40]	; (80010d0 <SysTick_Config+0x40>)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ae:	210f      	movs	r1, #15
 80010b0:	f04f 30ff 	mov.w	r0, #4294967295
 80010b4:	f7ff ff8e 	bl	8000fd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <SysTick_Config+0x40>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010be:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <SysTick_Config+0x40>)
 80010c0:	2207      	movs	r2, #7
 80010c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	e000e010 	.word	0xe000e010

080010d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff ff47 	bl	8000f70 <__NVIC_SetPriorityGrouping>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b086      	sub	sp, #24
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	4603      	mov	r3, r0
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
 80010f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010fc:	f7ff ff5c 	bl	8000fb8 <__NVIC_GetPriorityGrouping>
 8001100:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	68b9      	ldr	r1, [r7, #8]
 8001106:	6978      	ldr	r0, [r7, #20]
 8001108:	f7ff ff8e 	bl	8001028 <NVIC_EncodePriority>
 800110c:	4602      	mov	r2, r0
 800110e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001112:	4611      	mov	r1, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff5d 	bl	8000fd4 <__NVIC_SetPriority>
}
 800111a:	bf00      	nop
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ffb0 	bl	8001090 <SysTick_Config>
 8001130:	4603      	mov	r3, r0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	; 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800114e:	2300      	movs	r3, #0
 8001150:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
 8001156:	e159      	b.n	800140c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001158:	2201      	movs	r2, #1
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	697a      	ldr	r2, [r7, #20]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	429a      	cmp	r2, r3
 8001172:	f040 8148 	bne.w	8001406 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	2b02      	cmp	r3, #2
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_Init+0x4a>
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2b12      	cmp	r3, #18
 8001184:	d123      	bne.n	80011ce <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	08da      	lsrs	r2, r3, #3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3208      	adds	r2, #8
 800118e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	220f      	movs	r2, #15
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43db      	mvns	r3, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4013      	ands	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	691a      	ldr	r2, [r3, #16]
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	f003 0307 	and.w	r3, r3, #7
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4313      	orrs	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	08da      	lsrs	r2, r3, #3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3208      	adds	r2, #8
 80011c8:	69b9      	ldr	r1, [r7, #24]
 80011ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	2203      	movs	r2, #3
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43db      	mvns	r3, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4013      	ands	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 0203 	and.w	r2, r3, #3
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d00b      	beq.n	8001222 <HAL_GPIO_Init+0xe6>
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	2b02      	cmp	r3, #2
 8001210:	d007      	beq.n	8001222 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001216:	2b11      	cmp	r3, #17
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2b12      	cmp	r3, #18
 8001220:	d130      	bne.n	8001284 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	2203      	movs	r2, #3
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4013      	ands	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	68da      	ldr	r2, [r3, #12]
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001258:	2201      	movs	r2, #1
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	091b      	lsrs	r3, r3, #4
 800126e:	f003 0201 	and.w	r2, r3, #1
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	2203      	movs	r2, #3
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	689a      	ldr	r2, [r3, #8]
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f000 80a2 	beq.w	8001406 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	4b56      	ldr	r3, [pc, #344]	; (8001420 <HAL_GPIO_Init+0x2e4>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	4a55      	ldr	r2, [pc, #340]	; (8001420 <HAL_GPIO_Init+0x2e4>)
 80012cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d0:	6453      	str	r3, [r2, #68]	; 0x44
 80012d2:	4b53      	ldr	r3, [pc, #332]	; (8001420 <HAL_GPIO_Init+0x2e4>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012de:	4a51      	ldr	r2, [pc, #324]	; (8001424 <HAL_GPIO_Init+0x2e8>)
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	089b      	lsrs	r3, r3, #2
 80012e4:	3302      	adds	r3, #2
 80012e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f003 0303 	and.w	r3, r3, #3
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	220f      	movs	r2, #15
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a48      	ldr	r2, [pc, #288]	; (8001428 <HAL_GPIO_Init+0x2ec>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d019      	beq.n	800133e <HAL_GPIO_Init+0x202>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a47      	ldr	r2, [pc, #284]	; (800142c <HAL_GPIO_Init+0x2f0>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d013      	beq.n	800133a <HAL_GPIO_Init+0x1fe>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a46      	ldr	r2, [pc, #280]	; (8001430 <HAL_GPIO_Init+0x2f4>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d00d      	beq.n	8001336 <HAL_GPIO_Init+0x1fa>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a45      	ldr	r2, [pc, #276]	; (8001434 <HAL_GPIO_Init+0x2f8>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d007      	beq.n	8001332 <HAL_GPIO_Init+0x1f6>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a44      	ldr	r2, [pc, #272]	; (8001438 <HAL_GPIO_Init+0x2fc>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d101      	bne.n	800132e <HAL_GPIO_Init+0x1f2>
 800132a:	2304      	movs	r3, #4
 800132c:	e008      	b.n	8001340 <HAL_GPIO_Init+0x204>
 800132e:	2307      	movs	r3, #7
 8001330:	e006      	b.n	8001340 <HAL_GPIO_Init+0x204>
 8001332:	2303      	movs	r3, #3
 8001334:	e004      	b.n	8001340 <HAL_GPIO_Init+0x204>
 8001336:	2302      	movs	r3, #2
 8001338:	e002      	b.n	8001340 <HAL_GPIO_Init+0x204>
 800133a:	2301      	movs	r3, #1
 800133c:	e000      	b.n	8001340 <HAL_GPIO_Init+0x204>
 800133e:	2300      	movs	r3, #0
 8001340:	69fa      	ldr	r2, [r7, #28]
 8001342:	f002 0203 	and.w	r2, r2, #3
 8001346:	0092      	lsls	r2, r2, #2
 8001348:	4093      	lsls	r3, r2
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001350:	4934      	ldr	r1, [pc, #208]	; (8001424 <HAL_GPIO_Init+0x2e8>)
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	089b      	lsrs	r3, r3, #2
 8001356:	3302      	adds	r3, #2
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800135e:	4b37      	ldr	r3, [pc, #220]	; (800143c <HAL_GPIO_Init+0x300>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001382:	4a2e      	ldr	r2, [pc, #184]	; (800143c <HAL_GPIO_Init+0x300>)
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001388:	4b2c      	ldr	r3, [pc, #176]	; (800143c <HAL_GPIO_Init+0x300>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ac:	4a23      	ldr	r2, [pc, #140]	; (800143c <HAL_GPIO_Init+0x300>)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013b2:	4b22      	ldr	r3, [pc, #136]	; (800143c <HAL_GPIO_Init+0x300>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	43db      	mvns	r3, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4013      	ands	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013d6:	4a19      	ldr	r2, [pc, #100]	; (800143c <HAL_GPIO_Init+0x300>)
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013dc:	4b17      	ldr	r3, [pc, #92]	; (800143c <HAL_GPIO_Init+0x300>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001400:	4a0e      	ldr	r2, [pc, #56]	; (800143c <HAL_GPIO_Init+0x300>)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3301      	adds	r3, #1
 800140a:	61fb      	str	r3, [r7, #28]
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	2b0f      	cmp	r3, #15
 8001410:	f67f aea2 	bls.w	8001158 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001414:	bf00      	nop
 8001416:	3724      	adds	r7, #36	; 0x24
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	40023800 	.word	0x40023800
 8001424:	40013800 	.word	0x40013800
 8001428:	40020000 	.word	0x40020000
 800142c:	40020400 	.word	0x40020400
 8001430:	40020800 	.word	0x40020800
 8001434:	40020c00 	.word	0x40020c00
 8001438:	40021000 	.word	0x40021000
 800143c:	40013c00 	.word	0x40013c00

08001440 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e22d      	b.n	80018ae <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	d075      	beq.n	800154a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800145e:	4ba3      	ldr	r3, [pc, #652]	; (80016ec <HAL_RCC_OscConfig+0x2ac>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 030c 	and.w	r3, r3, #12
 8001466:	2b04      	cmp	r3, #4
 8001468:	d00c      	beq.n	8001484 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800146a:	4ba0      	ldr	r3, [pc, #640]	; (80016ec <HAL_RCC_OscConfig+0x2ac>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001472:	2b08      	cmp	r3, #8
 8001474:	d112      	bne.n	800149c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001476:	4b9d      	ldr	r3, [pc, #628]	; (80016ec <HAL_RCC_OscConfig+0x2ac>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800147e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001482:	d10b      	bne.n	800149c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001484:	4b99      	ldr	r3, [pc, #612]	; (80016ec <HAL_RCC_OscConfig+0x2ac>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d05b      	beq.n	8001548 <HAL_RCC_OscConfig+0x108>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d157      	bne.n	8001548 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e208      	b.n	80018ae <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014a4:	d106      	bne.n	80014b4 <HAL_RCC_OscConfig+0x74>
 80014a6:	4b91      	ldr	r3, [pc, #580]	; (80016ec <HAL_RCC_OscConfig+0x2ac>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a90      	ldr	r2, [pc, #576]	; (80016ec <HAL_RCC_OscConfig+0x2ac>)
 80014ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	e01d      	b.n	80014f0 <HAL_RCC_OscConfig+0xb0>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014bc:	d10c      	bne.n	80014d8 <HAL_RCC_OscConfig+0x98>
 80014be:	4b8b      	ldr	r3, [pc, #556]	; (80016ec <HAL_RCC_OscConfig+0x2ac>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a8a      	ldr	r2, [pc, #552]	; (80016ec <HAL_RCC_OscConfig+0x2ac>)
 80014c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	4b88      	ldr	r3, [pc, #544]	; (80016ec <HAL_RCC_OscConfig+0x2ac>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a87      	ldr	r2, [pc, #540]	; (80016ec <HAL_RCC_OscConfig+0x2ac>)
 80014d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	e00b      	b.n	80014f0 <HAL_RCC_OscConfig+0xb0>
 80014d8:	4b84      	ldr	r3, [pc, #528]	; (80016ec <HAL_RCC_OscConfig+0x2ac>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a83      	ldr	r2, [pc, #524]	; (80016ec <HAL_RCC_OscConfig+0x2ac>)
 80014de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014e2:	6013      	str	r3, [r2, #0]
 80014e4:	4b81      	ldr	r3, [pc, #516]	; (80016ec <HAL_RCC_OscConfig+0x2ac>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a80      	ldr	r2, [pc, #512]	; (80016ec <HAL_RCC_OscConfig+0x2ac>)
 80014ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d013      	beq.n	8001520 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f8:	f7ff fa94 	bl	8000a24 <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001500:	f7ff fa90 	bl	8000a24 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b64      	cmp	r3, #100	; 0x64
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e1cd      	b.n	80018ae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001512:	4b76      	ldr	r3, [pc, #472]	; (80016ec <HAL_RCC_OscConfig+0x2ac>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d0f0      	beq.n	8001500 <HAL_RCC_OscConfig+0xc0>
 800151e:	e014      	b.n	800154a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001520:	f7ff fa80 	bl	8000a24 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001528:	f7ff fa7c 	bl	8000a24 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b64      	cmp	r3, #100	; 0x64
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e1b9      	b.n	80018ae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800153a:	4b6c      	ldr	r3, [pc, #432]	; (80016ec <HAL_RCC_OscConfig+0x2ac>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1f0      	bne.n	8001528 <HAL_RCC_OscConfig+0xe8>
 8001546:	e000      	b.n	800154a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d063      	beq.n	800161e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001556:	4b65      	ldr	r3, [pc, #404]	; (80016ec <HAL_RCC_OscConfig+0x2ac>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f003 030c 	and.w	r3, r3, #12
 800155e:	2b00      	cmp	r3, #0
 8001560:	d00b      	beq.n	800157a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001562:	4b62      	ldr	r3, [pc, #392]	; (80016ec <HAL_RCC_OscConfig+0x2ac>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800156a:	2b08      	cmp	r3, #8
 800156c:	d11c      	bne.n	80015a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800156e:	4b5f      	ldr	r3, [pc, #380]	; (80016ec <HAL_RCC_OscConfig+0x2ac>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d116      	bne.n	80015a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800157a:	4b5c      	ldr	r3, [pc, #368]	; (80016ec <HAL_RCC_OscConfig+0x2ac>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d005      	beq.n	8001592 <HAL_RCC_OscConfig+0x152>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d001      	beq.n	8001592 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e18d      	b.n	80018ae <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001592:	4b56      	ldr	r3, [pc, #344]	; (80016ec <HAL_RCC_OscConfig+0x2ac>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	4952      	ldr	r1, [pc, #328]	; (80016ec <HAL_RCC_OscConfig+0x2ac>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015a6:	e03a      	b.n	800161e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d020      	beq.n	80015f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015b0:	4b4f      	ldr	r3, [pc, #316]	; (80016f0 <HAL_RCC_OscConfig+0x2b0>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b6:	f7ff fa35 	bl	8000a24 <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015be:	f7ff fa31 	bl	8000a24 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e16e      	b.n	80018ae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d0:	4b46      	ldr	r3, [pc, #280]	; (80016ec <HAL_RCC_OscConfig+0x2ac>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0f0      	beq.n	80015be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015dc:	4b43      	ldr	r3, [pc, #268]	; (80016ec <HAL_RCC_OscConfig+0x2ac>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	4940      	ldr	r1, [pc, #256]	; (80016ec <HAL_RCC_OscConfig+0x2ac>)
 80015ec:	4313      	orrs	r3, r2
 80015ee:	600b      	str	r3, [r1, #0]
 80015f0:	e015      	b.n	800161e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015f2:	4b3f      	ldr	r3, [pc, #252]	; (80016f0 <HAL_RCC_OscConfig+0x2b0>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f8:	f7ff fa14 	bl	8000a24 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001600:	f7ff fa10 	bl	8000a24 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e14d      	b.n	80018ae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001612:	4b36      	ldr	r3, [pc, #216]	; (80016ec <HAL_RCC_OscConfig+0x2ac>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f0      	bne.n	8001600 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	2b00      	cmp	r3, #0
 8001628:	d030      	beq.n	800168c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d016      	beq.n	8001660 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001632:	4b30      	ldr	r3, [pc, #192]	; (80016f4 <HAL_RCC_OscConfig+0x2b4>)
 8001634:	2201      	movs	r2, #1
 8001636:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001638:	f7ff f9f4 	bl	8000a24 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001640:	f7ff f9f0 	bl	8000a24 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e12d      	b.n	80018ae <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001652:	4b26      	ldr	r3, [pc, #152]	; (80016ec <HAL_RCC_OscConfig+0x2ac>)
 8001654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0f0      	beq.n	8001640 <HAL_RCC_OscConfig+0x200>
 800165e:	e015      	b.n	800168c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001660:	4b24      	ldr	r3, [pc, #144]	; (80016f4 <HAL_RCC_OscConfig+0x2b4>)
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001666:	f7ff f9dd 	bl	8000a24 <HAL_GetTick>
 800166a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800166c:	e008      	b.n	8001680 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800166e:	f7ff f9d9 	bl	8000a24 <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e116      	b.n	80018ae <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001680:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <HAL_RCC_OscConfig+0x2ac>)
 8001682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1f0      	bne.n	800166e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	2b00      	cmp	r3, #0
 8001696:	f000 80a0 	beq.w	80017da <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800169a:	2300      	movs	r3, #0
 800169c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800169e:	4b13      	ldr	r3, [pc, #76]	; (80016ec <HAL_RCC_OscConfig+0x2ac>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d10f      	bne.n	80016ca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <HAL_RCC_OscConfig+0x2ac>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	4a0e      	ldr	r2, [pc, #56]	; (80016ec <HAL_RCC_OscConfig+0x2ac>)
 80016b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ba:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <HAL_RCC_OscConfig+0x2ac>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80016c6:	2301      	movs	r3, #1
 80016c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ca:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <HAL_RCC_OscConfig+0x2b8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d121      	bne.n	800171a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016d6:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <HAL_RCC_OscConfig+0x2b8>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a07      	ldr	r2, [pc, #28]	; (80016f8 <HAL_RCC_OscConfig+0x2b8>)
 80016dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016e2:	f7ff f99f 	bl	8000a24 <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e8:	e011      	b.n	800170e <HAL_RCC_OscConfig+0x2ce>
 80016ea:	bf00      	nop
 80016ec:	40023800 	.word	0x40023800
 80016f0:	42470000 	.word	0x42470000
 80016f4:	42470e80 	.word	0x42470e80
 80016f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016fc:	f7ff f992 	bl	8000a24 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e0cf      	b.n	80018ae <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800170e:	4b6a      	ldr	r3, [pc, #424]	; (80018b8 <HAL_RCC_OscConfig+0x478>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001716:	2b00      	cmp	r3, #0
 8001718:	d0f0      	beq.n	80016fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d106      	bne.n	8001730 <HAL_RCC_OscConfig+0x2f0>
 8001722:	4b66      	ldr	r3, [pc, #408]	; (80018bc <HAL_RCC_OscConfig+0x47c>)
 8001724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001726:	4a65      	ldr	r2, [pc, #404]	; (80018bc <HAL_RCC_OscConfig+0x47c>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6713      	str	r3, [r2, #112]	; 0x70
 800172e:	e01c      	b.n	800176a <HAL_RCC_OscConfig+0x32a>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	2b05      	cmp	r3, #5
 8001736:	d10c      	bne.n	8001752 <HAL_RCC_OscConfig+0x312>
 8001738:	4b60      	ldr	r3, [pc, #384]	; (80018bc <HAL_RCC_OscConfig+0x47c>)
 800173a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800173c:	4a5f      	ldr	r2, [pc, #380]	; (80018bc <HAL_RCC_OscConfig+0x47c>)
 800173e:	f043 0304 	orr.w	r3, r3, #4
 8001742:	6713      	str	r3, [r2, #112]	; 0x70
 8001744:	4b5d      	ldr	r3, [pc, #372]	; (80018bc <HAL_RCC_OscConfig+0x47c>)
 8001746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001748:	4a5c      	ldr	r2, [pc, #368]	; (80018bc <HAL_RCC_OscConfig+0x47c>)
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	6713      	str	r3, [r2, #112]	; 0x70
 8001750:	e00b      	b.n	800176a <HAL_RCC_OscConfig+0x32a>
 8001752:	4b5a      	ldr	r3, [pc, #360]	; (80018bc <HAL_RCC_OscConfig+0x47c>)
 8001754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001756:	4a59      	ldr	r2, [pc, #356]	; (80018bc <HAL_RCC_OscConfig+0x47c>)
 8001758:	f023 0301 	bic.w	r3, r3, #1
 800175c:	6713      	str	r3, [r2, #112]	; 0x70
 800175e:	4b57      	ldr	r3, [pc, #348]	; (80018bc <HAL_RCC_OscConfig+0x47c>)
 8001760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001762:	4a56      	ldr	r2, [pc, #344]	; (80018bc <HAL_RCC_OscConfig+0x47c>)
 8001764:	f023 0304 	bic.w	r3, r3, #4
 8001768:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d015      	beq.n	800179e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001772:	f7ff f957 	bl	8000a24 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001778:	e00a      	b.n	8001790 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800177a:	f7ff f953 	bl	8000a24 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	f241 3288 	movw	r2, #5000	; 0x1388
 8001788:	4293      	cmp	r3, r2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e08e      	b.n	80018ae <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001790:	4b4a      	ldr	r3, [pc, #296]	; (80018bc <HAL_RCC_OscConfig+0x47c>)
 8001792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d0ee      	beq.n	800177a <HAL_RCC_OscConfig+0x33a>
 800179c:	e014      	b.n	80017c8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800179e:	f7ff f941 	bl	8000a24 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a4:	e00a      	b.n	80017bc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017a6:	f7ff f93d 	bl	8000a24 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e078      	b.n	80018ae <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017bc:	4b3f      	ldr	r3, [pc, #252]	; (80018bc <HAL_RCC_OscConfig+0x47c>)
 80017be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1ee      	bne.n	80017a6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017c8:	7dfb      	ldrb	r3, [r7, #23]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d105      	bne.n	80017da <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ce:	4b3b      	ldr	r3, [pc, #236]	; (80018bc <HAL_RCC_OscConfig+0x47c>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	4a3a      	ldr	r2, [pc, #232]	; (80018bc <HAL_RCC_OscConfig+0x47c>)
 80017d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d064      	beq.n	80018ac <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017e2:	4b36      	ldr	r3, [pc, #216]	; (80018bc <HAL_RCC_OscConfig+0x47c>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f003 030c 	and.w	r3, r3, #12
 80017ea:	2b08      	cmp	r3, #8
 80017ec:	d05c      	beq.n	80018a8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d141      	bne.n	800187a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f6:	4b32      	ldr	r3, [pc, #200]	; (80018c0 <HAL_RCC_OscConfig+0x480>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fc:	f7ff f912 	bl	8000a24 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001804:	f7ff f90e 	bl	8000a24 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e04b      	b.n	80018ae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001816:	4b29      	ldr	r3, [pc, #164]	; (80018bc <HAL_RCC_OscConfig+0x47c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1f0      	bne.n	8001804 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	69da      	ldr	r2, [r3, #28]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001830:	019b      	lsls	r3, r3, #6
 8001832:	431a      	orrs	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001838:	085b      	lsrs	r3, r3, #1
 800183a:	3b01      	subs	r3, #1
 800183c:	041b      	lsls	r3, r3, #16
 800183e:	431a      	orrs	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001844:	061b      	lsls	r3, r3, #24
 8001846:	491d      	ldr	r1, [pc, #116]	; (80018bc <HAL_RCC_OscConfig+0x47c>)
 8001848:	4313      	orrs	r3, r2
 800184a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800184c:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <HAL_RCC_OscConfig+0x480>)
 800184e:	2201      	movs	r2, #1
 8001850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001852:	f7ff f8e7 	bl	8000a24 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800185a:	f7ff f8e3 	bl	8000a24 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e020      	b.n	80018ae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800186c:	4b13      	ldr	r3, [pc, #76]	; (80018bc <HAL_RCC_OscConfig+0x47c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0f0      	beq.n	800185a <HAL_RCC_OscConfig+0x41a>
 8001878:	e018      	b.n	80018ac <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800187a:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <HAL_RCC_OscConfig+0x480>)
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001880:	f7ff f8d0 	bl	8000a24 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001888:	f7ff f8cc 	bl	8000a24 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e009      	b.n	80018ae <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800189a:	4b08      	ldr	r3, [pc, #32]	; (80018bc <HAL_RCC_OscConfig+0x47c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f0      	bne.n	8001888 <HAL_RCC_OscConfig+0x448>
 80018a6:	e001      	b.n	80018ac <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e000      	b.n	80018ae <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40007000 	.word	0x40007000
 80018bc:	40023800 	.word	0x40023800
 80018c0:	42470060 	.word	0x42470060

080018c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e0ca      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018d8:	4b67      	ldr	r3, [pc, #412]	; (8001a78 <HAL_RCC_ClockConfig+0x1b4>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 030f 	and.w	r3, r3, #15
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d90c      	bls.n	8001900 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e6:	4b64      	ldr	r3, [pc, #400]	; (8001a78 <HAL_RCC_ClockConfig+0x1b4>)
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ee:	4b62      	ldr	r3, [pc, #392]	; (8001a78 <HAL_RCC_ClockConfig+0x1b4>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d001      	beq.n	8001900 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e0b6      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d020      	beq.n	800194e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0304 	and.w	r3, r3, #4
 8001914:	2b00      	cmp	r3, #0
 8001916:	d005      	beq.n	8001924 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001918:	4b58      	ldr	r3, [pc, #352]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	4a57      	ldr	r2, [pc, #348]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 800191e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001922:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0308 	and.w	r3, r3, #8
 800192c:	2b00      	cmp	r3, #0
 800192e:	d005      	beq.n	800193c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001930:	4b52      	ldr	r3, [pc, #328]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4a51      	ldr	r2, [pc, #324]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 8001936:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800193a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800193c:	4b4f      	ldr	r3, [pc, #316]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	494c      	ldr	r1, [pc, #304]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 800194a:	4313      	orrs	r3, r2
 800194c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	2b00      	cmp	r3, #0
 8001958:	d044      	beq.n	80019e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d107      	bne.n	8001972 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001962:	4b46      	ldr	r3, [pc, #280]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d119      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e07d      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	2b02      	cmp	r3, #2
 8001978:	d003      	beq.n	8001982 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800197e:	2b03      	cmp	r3, #3
 8001980:	d107      	bne.n	8001992 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001982:	4b3e      	ldr	r3, [pc, #248]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d109      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e06d      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001992:	4b3a      	ldr	r3, [pc, #232]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e065      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019a2:	4b36      	ldr	r3, [pc, #216]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f023 0203 	bic.w	r2, r3, #3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	4933      	ldr	r1, [pc, #204]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019b4:	f7ff f836 	bl	8000a24 <HAL_GetTick>
 80019b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ba:	e00a      	b.n	80019d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019bc:	f7ff f832 	bl	8000a24 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e04d      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019d2:	4b2a      	ldr	r3, [pc, #168]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 020c 	and.w	r2, r3, #12
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d1eb      	bne.n	80019bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019e4:	4b24      	ldr	r3, [pc, #144]	; (8001a78 <HAL_RCC_ClockConfig+0x1b4>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 030f 	and.w	r3, r3, #15
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d20c      	bcs.n	8001a0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f2:	4b21      	ldr	r3, [pc, #132]	; (8001a78 <HAL_RCC_ClockConfig+0x1b4>)
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fa:	4b1f      	ldr	r3, [pc, #124]	; (8001a78 <HAL_RCC_ClockConfig+0x1b4>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d001      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e030      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0304 	and.w	r3, r3, #4
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d008      	beq.n	8001a2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a18:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	4915      	ldr	r1, [pc, #84]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0308 	and.w	r3, r3, #8
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d009      	beq.n	8001a4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a36:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	490d      	ldr	r1, [pc, #52]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a4a:	f000 f81d 	bl	8001a88 <HAL_RCC_GetSysClockFreq>
 8001a4e:	4601      	mov	r1, r0
 8001a50:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	091b      	lsrs	r3, r3, #4
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	4a09      	ldr	r2, [pc, #36]	; (8001a80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5c:	5cd3      	ldrb	r3, [r2, r3]
 8001a5e:	fa21 f303 	lsr.w	r3, r1, r3
 8001a62:	4a08      	ldr	r2, [pc, #32]	; (8001a84 <HAL_RCC_ClockConfig+0x1c0>)
 8001a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a66:	2000      	movs	r0, #0
 8001a68:	f7fe ff98 	bl	800099c <HAL_InitTick>

  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40023c00 	.word	0x40023c00
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	08003748 	.word	0x08003748
 8001a84:	20000008 	.word	0x20000008

08001a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	2300      	movs	r3, #0
 8001a98:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a9e:	4b63      	ldr	r3, [pc, #396]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 030c 	and.w	r3, r3, #12
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	d007      	beq.n	8001aba <HAL_RCC_GetSysClockFreq+0x32>
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	d008      	beq.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x38>
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f040 80b4 	bne.w	8001c1c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ab4:	4b5e      	ldr	r3, [pc, #376]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001ab6:	60bb      	str	r3, [r7, #8]
       break;
 8001ab8:	e0b3      	b.n	8001c22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001aba:	4b5e      	ldr	r3, [pc, #376]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001abc:	60bb      	str	r3, [r7, #8]
      break;
 8001abe:	e0b0      	b.n	8001c22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ac0:	4b5a      	ldr	r3, [pc, #360]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ac8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001aca:	4b58      	ldr	r3, [pc, #352]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d04a      	beq.n	8001b6c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ad6:	4b55      	ldr	r3, [pc, #340]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	099b      	lsrs	r3, r3, #6
 8001adc:	f04f 0400 	mov.w	r4, #0
 8001ae0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ae4:	f04f 0200 	mov.w	r2, #0
 8001ae8:	ea03 0501 	and.w	r5, r3, r1
 8001aec:	ea04 0602 	and.w	r6, r4, r2
 8001af0:	4629      	mov	r1, r5
 8001af2:	4632      	mov	r2, r6
 8001af4:	f04f 0300 	mov.w	r3, #0
 8001af8:	f04f 0400 	mov.w	r4, #0
 8001afc:	0154      	lsls	r4, r2, #5
 8001afe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b02:	014b      	lsls	r3, r1, #5
 8001b04:	4619      	mov	r1, r3
 8001b06:	4622      	mov	r2, r4
 8001b08:	1b49      	subs	r1, r1, r5
 8001b0a:	eb62 0206 	sbc.w	r2, r2, r6
 8001b0e:	f04f 0300 	mov.w	r3, #0
 8001b12:	f04f 0400 	mov.w	r4, #0
 8001b16:	0194      	lsls	r4, r2, #6
 8001b18:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001b1c:	018b      	lsls	r3, r1, #6
 8001b1e:	1a5b      	subs	r3, r3, r1
 8001b20:	eb64 0402 	sbc.w	r4, r4, r2
 8001b24:	f04f 0100 	mov.w	r1, #0
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	00e2      	lsls	r2, r4, #3
 8001b2e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001b32:	00d9      	lsls	r1, r3, #3
 8001b34:	460b      	mov	r3, r1
 8001b36:	4614      	mov	r4, r2
 8001b38:	195b      	adds	r3, r3, r5
 8001b3a:	eb44 0406 	adc.w	r4, r4, r6
 8001b3e:	f04f 0100 	mov.w	r1, #0
 8001b42:	f04f 0200 	mov.w	r2, #0
 8001b46:	0262      	lsls	r2, r4, #9
 8001b48:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001b4c:	0259      	lsls	r1, r3, #9
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4614      	mov	r4, r2
 8001b52:	4618      	mov	r0, r3
 8001b54:	4621      	mov	r1, r4
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f04f 0400 	mov.w	r4, #0
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	4623      	mov	r3, r4
 8001b60:	f7fe fd7a 	bl	8000658 <__aeabi_uldivmod>
 8001b64:	4603      	mov	r3, r0
 8001b66:	460c      	mov	r4, r1
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	e049      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b6c:	4b2f      	ldr	r3, [pc, #188]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	099b      	lsrs	r3, r3, #6
 8001b72:	f04f 0400 	mov.w	r4, #0
 8001b76:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b7a:	f04f 0200 	mov.w	r2, #0
 8001b7e:	ea03 0501 	and.w	r5, r3, r1
 8001b82:	ea04 0602 	and.w	r6, r4, r2
 8001b86:	4629      	mov	r1, r5
 8001b88:	4632      	mov	r2, r6
 8001b8a:	f04f 0300 	mov.w	r3, #0
 8001b8e:	f04f 0400 	mov.w	r4, #0
 8001b92:	0154      	lsls	r4, r2, #5
 8001b94:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b98:	014b      	lsls	r3, r1, #5
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4622      	mov	r2, r4
 8001b9e:	1b49      	subs	r1, r1, r5
 8001ba0:	eb62 0206 	sbc.w	r2, r2, r6
 8001ba4:	f04f 0300 	mov.w	r3, #0
 8001ba8:	f04f 0400 	mov.w	r4, #0
 8001bac:	0194      	lsls	r4, r2, #6
 8001bae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001bb2:	018b      	lsls	r3, r1, #6
 8001bb4:	1a5b      	subs	r3, r3, r1
 8001bb6:	eb64 0402 	sbc.w	r4, r4, r2
 8001bba:	f04f 0100 	mov.w	r1, #0
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	00e2      	lsls	r2, r4, #3
 8001bc4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001bc8:	00d9      	lsls	r1, r3, #3
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4614      	mov	r4, r2
 8001bce:	195b      	adds	r3, r3, r5
 8001bd0:	eb44 0406 	adc.w	r4, r4, r6
 8001bd4:	f04f 0100 	mov.w	r1, #0
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	02a2      	lsls	r2, r4, #10
 8001bde:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001be2:	0299      	lsls	r1, r3, #10
 8001be4:	460b      	mov	r3, r1
 8001be6:	4614      	mov	r4, r2
 8001be8:	4618      	mov	r0, r3
 8001bea:	4621      	mov	r1, r4
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f04f 0400 	mov.w	r4, #0
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	4623      	mov	r3, r4
 8001bf6:	f7fe fd2f 	bl	8000658 <__aeabi_uldivmod>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	460c      	mov	r4, r1
 8001bfe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c00:	4b0a      	ldr	r3, [pc, #40]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	0c1b      	lsrs	r3, r3, #16
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c18:	60bb      	str	r3, [r7, #8]
      break;
 8001c1a:	e002      	b.n	8001c22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c1c:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001c1e:	60bb      	str	r3, [r7, #8]
      break;
 8001c20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c22:	68bb      	ldr	r3, [r7, #8]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	00f42400 	.word	0x00f42400
 8001c34:	007a1200 	.word	0x007a1200

08001c38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c3c:	4b03      	ldr	r3, [pc, #12]	; (8001c4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	20000008 	.word	0x20000008

08001c50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c54:	f7ff fff0 	bl	8001c38 <HAL_RCC_GetHCLKFreq>
 8001c58:	4601      	mov	r1, r0
 8001c5a:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	0a9b      	lsrs	r3, r3, #10
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	4a03      	ldr	r2, [pc, #12]	; (8001c74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c66:	5cd3      	ldrb	r3, [r2, r3]
 8001c68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40023800 	.word	0x40023800
 8001c74:	08003758 	.word	0x08003758

08001c78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c7c:	f7ff ffdc 	bl	8001c38 <HAL_RCC_GetHCLKFreq>
 8001c80:	4601      	mov	r1, r0
 8001c82:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	0b5b      	lsrs	r3, r3, #13
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	4a03      	ldr	r2, [pc, #12]	; (8001c9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c8e:	5cd3      	ldrb	r3, [r2, r3]
 8001c90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	08003758 	.word	0x08003758

08001ca0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e083      	b.n	8001dbc <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d106      	bne.n	8001cce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f000 ffad 	bl	8002c28 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6812      	ldr	r2, [r2, #0]
 8001ce0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ce4:	f023 0307 	bic.w	r3, r3, #7
 8001ce8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4610      	mov	r0, r2
 8001cf6:	f000 f89d 	bl	8001e34 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d22:	f023 0303 	bic.w	r3, r3, #3
 8001d26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	021b      	lsls	r3, r3, #8
 8001d32:	4313      	orrs	r3, r2
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001d40:	f023 030c 	bic.w	r3, r3, #12
 8001d44:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001d4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	68da      	ldr	r2, [r3, #12]
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	021b      	lsls	r3, r3, #8
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	011a      	lsls	r2, r3, #4
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	031b      	lsls	r3, r3, #12
 8001d70:	4313      	orrs	r3, r2
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001d7e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8001d86:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	695b      	ldr	r3, [r3, #20]
 8001d90:	011b      	lsls	r3, r3, #4
 8001d92:	4313      	orrs	r3, r2
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3718      	adds	r7, #24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d002      	beq.n	8001dda <HAL_TIM_Encoder_Start+0x16>
 8001dd4:	2b04      	cmp	r3, #4
 8001dd6:	d008      	beq.n	8001dea <HAL_TIM_Encoder_Start+0x26>
 8001dd8:	e00f      	b.n	8001dfa <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2201      	movs	r2, #1
 8001de0:	2100      	movs	r1, #0
 8001de2:	4618      	mov	r0, r3
 8001de4:	f000 f8a6 	bl	8001f34 <TIM_CCxChannelCmd>
      break;
 8001de8:	e016      	b.n	8001e18 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2201      	movs	r2, #1
 8001df0:	2104      	movs	r1, #4
 8001df2:	4618      	mov	r0, r3
 8001df4:	f000 f89e 	bl	8001f34 <TIM_CCxChannelCmd>
      break;
 8001df8:	e00e      	b.n	8001e18 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	2100      	movs	r1, #0
 8001e02:	4618      	mov	r0, r3
 8001e04:	f000 f896 	bl	8001f34 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	2104      	movs	r1, #4
 8001e10:	4618      	mov	r0, r3
 8001e12:	f000 f88f 	bl	8001f34 <TIM_CCxChannelCmd>
      break;
 8001e16:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f042 0201 	orr.w	r2, r2, #1
 8001e26:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a34      	ldr	r2, [pc, #208]	; (8001f18 <TIM_Base_SetConfig+0xe4>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d00f      	beq.n	8001e6c <TIM_Base_SetConfig+0x38>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e52:	d00b      	beq.n	8001e6c <TIM_Base_SetConfig+0x38>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a31      	ldr	r2, [pc, #196]	; (8001f1c <TIM_Base_SetConfig+0xe8>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d007      	beq.n	8001e6c <TIM_Base_SetConfig+0x38>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a30      	ldr	r2, [pc, #192]	; (8001f20 <TIM_Base_SetConfig+0xec>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d003      	beq.n	8001e6c <TIM_Base_SetConfig+0x38>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a2f      	ldr	r2, [pc, #188]	; (8001f24 <TIM_Base_SetConfig+0xf0>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d108      	bne.n	8001e7e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	68fa      	ldr	r2, [r7, #12]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a25      	ldr	r2, [pc, #148]	; (8001f18 <TIM_Base_SetConfig+0xe4>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d01b      	beq.n	8001ebe <TIM_Base_SetConfig+0x8a>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e8c:	d017      	beq.n	8001ebe <TIM_Base_SetConfig+0x8a>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a22      	ldr	r2, [pc, #136]	; (8001f1c <TIM_Base_SetConfig+0xe8>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d013      	beq.n	8001ebe <TIM_Base_SetConfig+0x8a>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a21      	ldr	r2, [pc, #132]	; (8001f20 <TIM_Base_SetConfig+0xec>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d00f      	beq.n	8001ebe <TIM_Base_SetConfig+0x8a>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a20      	ldr	r2, [pc, #128]	; (8001f24 <TIM_Base_SetConfig+0xf0>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d00b      	beq.n	8001ebe <TIM_Base_SetConfig+0x8a>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a1f      	ldr	r2, [pc, #124]	; (8001f28 <TIM_Base_SetConfig+0xf4>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d007      	beq.n	8001ebe <TIM_Base_SetConfig+0x8a>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a1e      	ldr	r2, [pc, #120]	; (8001f2c <TIM_Base_SetConfig+0xf8>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d003      	beq.n	8001ebe <TIM_Base_SetConfig+0x8a>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a1d      	ldr	r2, [pc, #116]	; (8001f30 <TIM_Base_SetConfig+0xfc>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d108      	bne.n	8001ed0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ec4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a08      	ldr	r2, [pc, #32]	; (8001f18 <TIM_Base_SetConfig+0xe4>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d103      	bne.n	8001f04 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	691a      	ldr	r2, [r3, #16]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	615a      	str	r2, [r3, #20]
}
 8001f0a:	bf00      	nop
 8001f0c:	3714      	adds	r7, #20
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	40010000 	.word	0x40010000
 8001f1c:	40000400 	.word	0x40000400
 8001f20:	40000800 	.word	0x40000800
 8001f24:	40000c00 	.word	0x40000c00
 8001f28:	40014000 	.word	0x40014000
 8001f2c:	40014400 	.word	0x40014400
 8001f30:	40014800 	.word	0x40014800

08001f34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b087      	sub	sp, #28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	f003 031f 	and.w	r3, r3, #31
 8001f46:	2201      	movs	r2, #1
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6a1a      	ldr	r2, [r3, #32]
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	43db      	mvns	r3, r3
 8001f56:	401a      	ands	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6a1a      	ldr	r2, [r3, #32]
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	f003 031f 	and.w	r3, r3, #31
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	621a      	str	r2, [r3, #32]
}
 8001f72:	bf00      	nop
 8001f74:	371c      	adds	r7, #28
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b085      	sub	sp, #20
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
 8001f86:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d101      	bne.n	8001f96 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001f92:	2302      	movs	r3, #2
 8001f94:	e032      	b.n	8001ffc <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fbc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fce:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	68ba      	ldr	r2, [r7, #8]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e03f      	b.n	800209a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d106      	bne.n	8002034 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 fe42 	bl	8002cb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2224      	movs	r2, #36	; 0x24
 8002038:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68da      	ldr	r2, [r3, #12]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800204a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 f90b 	bl	8002268 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	691a      	ldr	r2, [r3, #16]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002060:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	695a      	ldr	r2, [r3, #20]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002070:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68da      	ldr	r2, [r3, #12]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002080:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2220      	movs	r2, #32
 800208c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2220      	movs	r2, #32
 8002094:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b088      	sub	sp, #32
 80020a6:	af02      	add	r7, sp, #8
 80020a8:	60f8      	str	r0, [r7, #12]
 80020aa:	60b9      	str	r1, [r7, #8]
 80020ac:	603b      	str	r3, [r7, #0]
 80020ae:	4613      	mov	r3, r2
 80020b0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b20      	cmp	r3, #32
 80020c0:	f040 8083 	bne.w	80021ca <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d002      	beq.n	80020d0 <HAL_UART_Transmit+0x2e>
 80020ca:	88fb      	ldrh	r3, [r7, #6]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e07b      	b.n	80021cc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d101      	bne.n	80020e2 <HAL_UART_Transmit+0x40>
 80020de:	2302      	movs	r3, #2
 80020e0:	e074      	b.n	80021cc <HAL_UART_Transmit+0x12a>
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2200      	movs	r2, #0
 80020ee:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2221      	movs	r2, #33	; 0x21
 80020f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80020f8:	f7fe fc94 	bl	8000a24 <HAL_GetTick>
 80020fc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	88fa      	ldrh	r2, [r7, #6]
 8002102:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	88fa      	ldrh	r2, [r7, #6]
 8002108:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800210a:	e042      	b.n	8002192 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002110:	b29b      	uxth	r3, r3
 8002112:	3b01      	subs	r3, #1
 8002114:	b29a      	uxth	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002122:	d122      	bne.n	800216a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	2200      	movs	r2, #0
 800212c:	2180      	movs	r1, #128	; 0x80
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f000 f850 	bl	80021d4 <UART_WaitOnFlagUntilTimeout>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e046      	b.n	80021cc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	461a      	mov	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002150:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d103      	bne.n	8002162 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	3302      	adds	r3, #2
 800215e:	60bb      	str	r3, [r7, #8]
 8002160:	e017      	b.n	8002192 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	3301      	adds	r3, #1
 8002166:	60bb      	str	r3, [r7, #8]
 8002168:	e013      	b.n	8002192 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	2200      	movs	r2, #0
 8002172:	2180      	movs	r1, #128	; 0x80
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f000 f82d 	bl	80021d4 <UART_WaitOnFlagUntilTimeout>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e023      	b.n	80021cc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	1c5a      	adds	r2, r3, #1
 8002188:	60ba      	str	r2, [r7, #8]
 800218a:	781a      	ldrb	r2, [r3, #0]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002196:	b29b      	uxth	r3, r3
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1b7      	bne.n	800210c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	2200      	movs	r2, #0
 80021a4:	2140      	movs	r1, #64	; 0x40
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 f814 	bl	80021d4 <UART_WaitOnFlagUntilTimeout>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e00a      	b.n	80021cc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2220      	movs	r2, #32
 80021ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	e000      	b.n	80021cc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80021ca:	2302      	movs	r3, #2
  }
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3718      	adds	r7, #24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	603b      	str	r3, [r7, #0]
 80021e0:	4613      	mov	r3, r2
 80021e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021e4:	e02c      	b.n	8002240 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ec:	d028      	beq.n	8002240 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d007      	beq.n	8002204 <UART_WaitOnFlagUntilTimeout+0x30>
 80021f4:	f7fe fc16 	bl	8000a24 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	429a      	cmp	r2, r3
 8002202:	d21d      	bcs.n	8002240 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002212:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	695a      	ldr	r2, [r3, #20]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0201 	bic.w	r2, r2, #1
 8002222:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2220      	movs	r2, #32
 8002228:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2220      	movs	r2, #32
 8002230:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e00f      	b.n	8002260 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	4013      	ands	r3, r2
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	429a      	cmp	r2, r3
 800224e:	bf0c      	ite	eq
 8002250:	2301      	moveq	r3, #1
 8002252:	2300      	movne	r3, #0
 8002254:	b2db      	uxtb	r3, r3
 8002256:	461a      	mov	r2, r3
 8002258:	79fb      	ldrb	r3, [r7, #7]
 800225a:	429a      	cmp	r2, r3
 800225c:	d0c3      	beq.n	80021e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002268:	b5b0      	push	{r4, r5, r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68da      	ldr	r2, [r3, #12]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689a      	ldr	r2, [r3, #8]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	431a      	orrs	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	4313      	orrs	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80022a8:	f023 030c 	bic.w	r3, r3, #12
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	68f9      	ldr	r1, [r7, #12]
 80022b2:	430b      	orrs	r3, r1
 80022b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	699a      	ldr	r2, [r3, #24]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022d4:	f040 80e4 	bne.w	80024a0 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4aab      	ldr	r2, [pc, #684]	; (800258c <UART_SetConfig+0x324>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d004      	beq.n	80022ec <UART_SetConfig+0x84>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4aaa      	ldr	r2, [pc, #680]	; (8002590 <UART_SetConfig+0x328>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d16c      	bne.n	80023c6 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80022ec:	f7ff fcc4 	bl	8001c78 <HAL_RCC_GetPCLK2Freq>
 80022f0:	4602      	mov	r2, r0
 80022f2:	4613      	mov	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	009a      	lsls	r2, r3, #2
 80022fa:	441a      	add	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	fbb2 f3f3 	udiv	r3, r2, r3
 8002306:	4aa3      	ldr	r2, [pc, #652]	; (8002594 <UART_SetConfig+0x32c>)
 8002308:	fba2 2303 	umull	r2, r3, r2, r3
 800230c:	095b      	lsrs	r3, r3, #5
 800230e:	011c      	lsls	r4, r3, #4
 8002310:	f7ff fcb2 	bl	8001c78 <HAL_RCC_GetPCLK2Freq>
 8002314:	4602      	mov	r2, r0
 8002316:	4613      	mov	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	009a      	lsls	r2, r3, #2
 800231e:	441a      	add	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	fbb2 f5f3 	udiv	r5, r2, r3
 800232a:	f7ff fca5 	bl	8001c78 <HAL_RCC_GetPCLK2Freq>
 800232e:	4602      	mov	r2, r0
 8002330:	4613      	mov	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4413      	add	r3, r2
 8002336:	009a      	lsls	r2, r3, #2
 8002338:	441a      	add	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	fbb2 f3f3 	udiv	r3, r2, r3
 8002344:	4a93      	ldr	r2, [pc, #588]	; (8002594 <UART_SetConfig+0x32c>)
 8002346:	fba2 2303 	umull	r2, r3, r2, r3
 800234a:	095b      	lsrs	r3, r3, #5
 800234c:	2264      	movs	r2, #100	; 0x64
 800234e:	fb02 f303 	mul.w	r3, r2, r3
 8002352:	1aeb      	subs	r3, r5, r3
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	3332      	adds	r3, #50	; 0x32
 8002358:	4a8e      	ldr	r2, [pc, #568]	; (8002594 <UART_SetConfig+0x32c>)
 800235a:	fba2 2303 	umull	r2, r3, r2, r3
 800235e:	095b      	lsrs	r3, r3, #5
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002366:	441c      	add	r4, r3
 8002368:	f7ff fc86 	bl	8001c78 <HAL_RCC_GetPCLK2Freq>
 800236c:	4602      	mov	r2, r0
 800236e:	4613      	mov	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	009a      	lsls	r2, r3, #2
 8002376:	441a      	add	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	fbb2 f5f3 	udiv	r5, r2, r3
 8002382:	f7ff fc79 	bl	8001c78 <HAL_RCC_GetPCLK2Freq>
 8002386:	4602      	mov	r2, r0
 8002388:	4613      	mov	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	009a      	lsls	r2, r3, #2
 8002390:	441a      	add	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	fbb2 f3f3 	udiv	r3, r2, r3
 800239c:	4a7d      	ldr	r2, [pc, #500]	; (8002594 <UART_SetConfig+0x32c>)
 800239e:	fba2 2303 	umull	r2, r3, r2, r3
 80023a2:	095b      	lsrs	r3, r3, #5
 80023a4:	2264      	movs	r2, #100	; 0x64
 80023a6:	fb02 f303 	mul.w	r3, r2, r3
 80023aa:	1aeb      	subs	r3, r5, r3
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	3332      	adds	r3, #50	; 0x32
 80023b0:	4a78      	ldr	r2, [pc, #480]	; (8002594 <UART_SetConfig+0x32c>)
 80023b2:	fba2 2303 	umull	r2, r3, r2, r3
 80023b6:	095b      	lsrs	r3, r3, #5
 80023b8:	f003 0207 	and.w	r2, r3, #7
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4422      	add	r2, r4
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	e154      	b.n	8002670 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80023c6:	f7ff fc43 	bl	8001c50 <HAL_RCC_GetPCLK1Freq>
 80023ca:	4602      	mov	r2, r0
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	009a      	lsls	r2, r3, #2
 80023d4:	441a      	add	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e0:	4a6c      	ldr	r2, [pc, #432]	; (8002594 <UART_SetConfig+0x32c>)
 80023e2:	fba2 2303 	umull	r2, r3, r2, r3
 80023e6:	095b      	lsrs	r3, r3, #5
 80023e8:	011c      	lsls	r4, r3, #4
 80023ea:	f7ff fc31 	bl	8001c50 <HAL_RCC_GetPCLK1Freq>
 80023ee:	4602      	mov	r2, r0
 80023f0:	4613      	mov	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	009a      	lsls	r2, r3, #2
 80023f8:	441a      	add	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	fbb2 f5f3 	udiv	r5, r2, r3
 8002404:	f7ff fc24 	bl	8001c50 <HAL_RCC_GetPCLK1Freq>
 8002408:	4602      	mov	r2, r0
 800240a:	4613      	mov	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	009a      	lsls	r2, r3, #2
 8002412:	441a      	add	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	fbb2 f3f3 	udiv	r3, r2, r3
 800241e:	4a5d      	ldr	r2, [pc, #372]	; (8002594 <UART_SetConfig+0x32c>)
 8002420:	fba2 2303 	umull	r2, r3, r2, r3
 8002424:	095b      	lsrs	r3, r3, #5
 8002426:	2264      	movs	r2, #100	; 0x64
 8002428:	fb02 f303 	mul.w	r3, r2, r3
 800242c:	1aeb      	subs	r3, r5, r3
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	3332      	adds	r3, #50	; 0x32
 8002432:	4a58      	ldr	r2, [pc, #352]	; (8002594 <UART_SetConfig+0x32c>)
 8002434:	fba2 2303 	umull	r2, r3, r2, r3
 8002438:	095b      	lsrs	r3, r3, #5
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002440:	441c      	add	r4, r3
 8002442:	f7ff fc05 	bl	8001c50 <HAL_RCC_GetPCLK1Freq>
 8002446:	4602      	mov	r2, r0
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	009a      	lsls	r2, r3, #2
 8002450:	441a      	add	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	fbb2 f5f3 	udiv	r5, r2, r3
 800245c:	f7ff fbf8 	bl	8001c50 <HAL_RCC_GetPCLK1Freq>
 8002460:	4602      	mov	r2, r0
 8002462:	4613      	mov	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	009a      	lsls	r2, r3, #2
 800246a:	441a      	add	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	fbb2 f3f3 	udiv	r3, r2, r3
 8002476:	4a47      	ldr	r2, [pc, #284]	; (8002594 <UART_SetConfig+0x32c>)
 8002478:	fba2 2303 	umull	r2, r3, r2, r3
 800247c:	095b      	lsrs	r3, r3, #5
 800247e:	2264      	movs	r2, #100	; 0x64
 8002480:	fb02 f303 	mul.w	r3, r2, r3
 8002484:	1aeb      	subs	r3, r5, r3
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	3332      	adds	r3, #50	; 0x32
 800248a:	4a42      	ldr	r2, [pc, #264]	; (8002594 <UART_SetConfig+0x32c>)
 800248c:	fba2 2303 	umull	r2, r3, r2, r3
 8002490:	095b      	lsrs	r3, r3, #5
 8002492:	f003 0207 	and.w	r2, r3, #7
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4422      	add	r2, r4
 800249c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800249e:	e0e7      	b.n	8002670 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a39      	ldr	r2, [pc, #228]	; (800258c <UART_SetConfig+0x324>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d004      	beq.n	80024b4 <UART_SetConfig+0x24c>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a38      	ldr	r2, [pc, #224]	; (8002590 <UART_SetConfig+0x328>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d171      	bne.n	8002598 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80024b4:	f7ff fbe0 	bl	8001c78 <HAL_RCC_GetPCLK2Freq>
 80024b8:	4602      	mov	r2, r0
 80024ba:	4613      	mov	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	009a      	lsls	r2, r3, #2
 80024c2:	441a      	add	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ce:	4a31      	ldr	r2, [pc, #196]	; (8002594 <UART_SetConfig+0x32c>)
 80024d0:	fba2 2303 	umull	r2, r3, r2, r3
 80024d4:	095b      	lsrs	r3, r3, #5
 80024d6:	011c      	lsls	r4, r3, #4
 80024d8:	f7ff fbce 	bl	8001c78 <HAL_RCC_GetPCLK2Freq>
 80024dc:	4602      	mov	r2, r0
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	009a      	lsls	r2, r3, #2
 80024e6:	441a      	add	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	fbb2 f5f3 	udiv	r5, r2, r3
 80024f2:	f7ff fbc1 	bl	8001c78 <HAL_RCC_GetPCLK2Freq>
 80024f6:	4602      	mov	r2, r0
 80024f8:	4613      	mov	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4413      	add	r3, r2
 80024fe:	009a      	lsls	r2, r3, #2
 8002500:	441a      	add	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	fbb2 f3f3 	udiv	r3, r2, r3
 800250c:	4a21      	ldr	r2, [pc, #132]	; (8002594 <UART_SetConfig+0x32c>)
 800250e:	fba2 2303 	umull	r2, r3, r2, r3
 8002512:	095b      	lsrs	r3, r3, #5
 8002514:	2264      	movs	r2, #100	; 0x64
 8002516:	fb02 f303 	mul.w	r3, r2, r3
 800251a:	1aeb      	subs	r3, r5, r3
 800251c:	011b      	lsls	r3, r3, #4
 800251e:	3332      	adds	r3, #50	; 0x32
 8002520:	4a1c      	ldr	r2, [pc, #112]	; (8002594 <UART_SetConfig+0x32c>)
 8002522:	fba2 2303 	umull	r2, r3, r2, r3
 8002526:	095b      	lsrs	r3, r3, #5
 8002528:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800252c:	441c      	add	r4, r3
 800252e:	f7ff fba3 	bl	8001c78 <HAL_RCC_GetPCLK2Freq>
 8002532:	4602      	mov	r2, r0
 8002534:	4613      	mov	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	009a      	lsls	r2, r3, #2
 800253c:	441a      	add	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	fbb2 f5f3 	udiv	r5, r2, r3
 8002548:	f7ff fb96 	bl	8001c78 <HAL_RCC_GetPCLK2Freq>
 800254c:	4602      	mov	r2, r0
 800254e:	4613      	mov	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4413      	add	r3, r2
 8002554:	009a      	lsls	r2, r3, #2
 8002556:	441a      	add	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002562:	4a0c      	ldr	r2, [pc, #48]	; (8002594 <UART_SetConfig+0x32c>)
 8002564:	fba2 2303 	umull	r2, r3, r2, r3
 8002568:	095b      	lsrs	r3, r3, #5
 800256a:	2264      	movs	r2, #100	; 0x64
 800256c:	fb02 f303 	mul.w	r3, r2, r3
 8002570:	1aeb      	subs	r3, r5, r3
 8002572:	011b      	lsls	r3, r3, #4
 8002574:	3332      	adds	r3, #50	; 0x32
 8002576:	4a07      	ldr	r2, [pc, #28]	; (8002594 <UART_SetConfig+0x32c>)
 8002578:	fba2 2303 	umull	r2, r3, r2, r3
 800257c:	095b      	lsrs	r3, r3, #5
 800257e:	f003 020f 	and.w	r2, r3, #15
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4422      	add	r2, r4
 8002588:	609a      	str	r2, [r3, #8]
 800258a:	e071      	b.n	8002670 <UART_SetConfig+0x408>
 800258c:	40011000 	.word	0x40011000
 8002590:	40011400 	.word	0x40011400
 8002594:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002598:	f7ff fb5a 	bl	8001c50 <HAL_RCC_GetPCLK1Freq>
 800259c:	4602      	mov	r2, r0
 800259e:	4613      	mov	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	009a      	lsls	r2, r3, #2
 80025a6:	441a      	add	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b2:	4a31      	ldr	r2, [pc, #196]	; (8002678 <UART_SetConfig+0x410>)
 80025b4:	fba2 2303 	umull	r2, r3, r2, r3
 80025b8:	095b      	lsrs	r3, r3, #5
 80025ba:	011c      	lsls	r4, r3, #4
 80025bc:	f7ff fb48 	bl	8001c50 <HAL_RCC_GetPCLK1Freq>
 80025c0:	4602      	mov	r2, r0
 80025c2:	4613      	mov	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4413      	add	r3, r2
 80025c8:	009a      	lsls	r2, r3, #2
 80025ca:	441a      	add	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	fbb2 f5f3 	udiv	r5, r2, r3
 80025d6:	f7ff fb3b 	bl	8001c50 <HAL_RCC_GetPCLK1Freq>
 80025da:	4602      	mov	r2, r0
 80025dc:	4613      	mov	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4413      	add	r3, r2
 80025e2:	009a      	lsls	r2, r3, #2
 80025e4:	441a      	add	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f0:	4a21      	ldr	r2, [pc, #132]	; (8002678 <UART_SetConfig+0x410>)
 80025f2:	fba2 2303 	umull	r2, r3, r2, r3
 80025f6:	095b      	lsrs	r3, r3, #5
 80025f8:	2264      	movs	r2, #100	; 0x64
 80025fa:	fb02 f303 	mul.w	r3, r2, r3
 80025fe:	1aeb      	subs	r3, r5, r3
 8002600:	011b      	lsls	r3, r3, #4
 8002602:	3332      	adds	r3, #50	; 0x32
 8002604:	4a1c      	ldr	r2, [pc, #112]	; (8002678 <UART_SetConfig+0x410>)
 8002606:	fba2 2303 	umull	r2, r3, r2, r3
 800260a:	095b      	lsrs	r3, r3, #5
 800260c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002610:	441c      	add	r4, r3
 8002612:	f7ff fb1d 	bl	8001c50 <HAL_RCC_GetPCLK1Freq>
 8002616:	4602      	mov	r2, r0
 8002618:	4613      	mov	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4413      	add	r3, r2
 800261e:	009a      	lsls	r2, r3, #2
 8002620:	441a      	add	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	fbb2 f5f3 	udiv	r5, r2, r3
 800262c:	f7ff fb10 	bl	8001c50 <HAL_RCC_GetPCLK1Freq>
 8002630:	4602      	mov	r2, r0
 8002632:	4613      	mov	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	009a      	lsls	r2, r3, #2
 800263a:	441a      	add	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	fbb2 f3f3 	udiv	r3, r2, r3
 8002646:	4a0c      	ldr	r2, [pc, #48]	; (8002678 <UART_SetConfig+0x410>)
 8002648:	fba2 2303 	umull	r2, r3, r2, r3
 800264c:	095b      	lsrs	r3, r3, #5
 800264e:	2264      	movs	r2, #100	; 0x64
 8002650:	fb02 f303 	mul.w	r3, r2, r3
 8002654:	1aeb      	subs	r3, r5, r3
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	3332      	adds	r3, #50	; 0x32
 800265a:	4a07      	ldr	r2, [pc, #28]	; (8002678 <UART_SetConfig+0x410>)
 800265c:	fba2 2303 	umull	r2, r3, r2, r3
 8002660:	095b      	lsrs	r3, r3, #5
 8002662:	f003 020f 	and.w	r2, r3, #15
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4422      	add	r2, r4
 800266c:	609a      	str	r2, [r3, #8]
}
 800266e:	e7ff      	b.n	8002670 <UART_SetConfig+0x408>
 8002670:	bf00      	nop
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bdb0      	pop	{r4, r5, r7, pc}
 8002678:	51eb851f 	.word	0x51eb851f

0800267c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800267c:	b590      	push	{r4, r7, lr}
 800267e:	b0a3      	sub	sp, #140	; 0x8c
 8002680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
double potar=0;
 8002682:	f04f 0300 	mov.w	r3, #0
 8002686:	f04f 0400 	mov.w	r4, #0
 800268a:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
char angle2[12];
char count2[12];
char vitesse2[12];
char vitesseP2[12];

int potardt1=0;
 800268e:	2300      	movs	r3, #0
 8002690:	67fb      	str	r3, [r7, #124]	; 0x7c
int potardt2=0;
 8002692:	2300      	movs	r3, #0
 8002694:	67bb      	str	r3, [r7, #120]	; 0x78

int vitesse=0;
 8002696:	2300      	movs	r3, #0
 8002698:	677b      	str	r3, [r7, #116]	; 0x74
int vitesseP=0;
 800269a:	2300      	movs	r3, #0
 800269c:	673b      	str	r3, [r7, #112]	; 0x70
int count=0;
 800269e:	2300      	movs	r3, #0
 80026a0:	66fb      	str	r3, [r7, #108]	; 0x6c
int sens=0;
 80026a2:	2300      	movs	r3, #0
 80026a4:	66bb      	str	r3, [r7, #104]	; 0x68
int angledt1=0;
 80026a6:	2300      	movs	r3, #0
 80026a8:	667b      	str	r3, [r7, #100]	; 0x64
int angledt2=0;
 80026aa:	2300      	movs	r3, #0
 80026ac:	663b      	str	r3, [r7, #96]	; 0x60

uint16_t adc_buf[3];
uint16_t adc_bufx=0;
 80026ae:	2300      	movs	r3, #0
 80026b0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026b4:	f7fe f950 	bl	8000958 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026b8:	f000 f8b8 	bl	800282c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026bc:	f000 f9e0 	bl	8002a80 <MX_GPIO_Init>
  MX_TIM1_Init();
 80026c0:	f000 f958 	bl	8002974 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80026c4:	f000 f9b2 	bl	8002a2c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80026c8:	f000 f91a 	bl	8002900 <MX_ADC1_Init>
	  	  	  	    : y -> PA1 / A1

	  	  	  	  Port sÃ©rie : putty et print();
	  	  	  	  */

	  HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80026cc:	213c      	movs	r1, #60	; 0x3c
 80026ce:	4852      	ldr	r0, [pc, #328]	; (8002818 <main+0x19c>)
 80026d0:	f7ff fb78 	bl	8001dc4 <HAL_TIM_Encoder_Start>


	  	  	  	  //Calcul encodeur
	  	  	  	  count = TIM1->CNT;
 80026d4:	4b51      	ldr	r3, [pc, #324]	; (800281c <main+0x1a0>)
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	66fb      	str	r3, [r7, #108]	; 0x6c
	  	  	  	  sens = __HAL_TIM_DIRECTION_STATUS(&htim1);
 80026da:	4b4f      	ldr	r3, [pc, #316]	; (8002818 <main+0x19c>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0310 	and.w	r3, r3, #16
 80026e4:	2b10      	cmp	r3, #16
 80026e6:	bf0c      	ite	eq
 80026e8:	2301      	moveq	r3, #1
 80026ea:	2300      	movne	r3, #0
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	66bb      	str	r3, [r7, #104]	; 0x68
	  	  	  	  //angle precedent en radians
	  	  	  	  //angledt1=count*2*3.14/8192-3.14;
	  	  	  	  angledt1=count*360/8192-180;
 80026f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026f2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80026f6:	fb02 f303 	mul.w	r3, r2, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	da02      	bge.n	8002704 <main+0x88>
 80026fe:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 8002702:	331f      	adds	r3, #31
 8002704:	135b      	asrs	r3, r3, #13
 8002706:	3bb4      	subs	r3, #180	; 0xb4
 8002708:	667b      	str	r3, [r7, #100]	; 0x64

	  	  	  	  //Calcul avec potar
	  	  	  	  HAL_ADC_Start(&hadc1);
 800270a:	4845      	ldr	r0, [pc, #276]	; (8002820 <main+0x1a4>)
 800270c:	f7fe f9fc 	bl	8000b08 <HAL_ADC_Start>
	  	  	 	  HAL_ADC_PollForConversion(&hadc1, 100);
 8002710:	2164      	movs	r1, #100	; 0x64
 8002712:	4843      	ldr	r0, [pc, #268]	; (8002820 <main+0x1a4>)
 8002714:	f7fe fa9e 	bl	8000c54 <HAL_ADC_PollForConversion>
	  	  	 	  potar=HAL_ADC_GetValue(&hadc1);
 8002718:	4841      	ldr	r0, [pc, #260]	; (8002820 <main+0x1a4>)
 800271a:	f7fe fb1f 	bl	8000d5c <HAL_ADC_GetValue>
 800271e:	4603      	mov	r3, r0
 8002720:	4618      	mov	r0, r3
 8002722:	f7fd fef7 	bl	8000514 <__aeabi_ui2d>
 8002726:	4603      	mov	r3, r0
 8002728:	460c      	mov	r4, r1
 800272a:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	  	  	 	  potardt1=(int)potar*100;
 800272e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002732:	f7fd ff69 	bl	8000608 <__aeabi_d2iz>
 8002736:	4602      	mov	r2, r0
 8002738:	2364      	movs	r3, #100	; 0x64
 800273a:	fb03 f302 	mul.w	r3, r3, r2
 800273e:	67fb      	str	r3, [r7, #124]	; 0x7c
	  	  	 	  //*2*PI/(4096)+PI/2;

	  	  	  	  HAL_Delay(200);
 8002740:	20c8      	movs	r0, #200	; 0xc8
 8002742:	f7fe f97b 	bl	8000a3c <HAL_Delay>

	  	  	  	  //Calcul encodeur
	  	  	      count = TIM1->CNT;
 8002746:	4b35      	ldr	r3, [pc, #212]	; (800281c <main+0x1a0>)
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	66fb      	str	r3, [r7, #108]	; 0x6c
	  	  	      sens = __HAL_TIM_DIRECTION_STATUS(&htim1);
 800274c:	4b32      	ldr	r3, [pc, #200]	; (8002818 <main+0x19c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0310 	and.w	r3, r3, #16
 8002756:	2b10      	cmp	r3, #16
 8002758:	bf0c      	ite	eq
 800275a:	2301      	moveq	r3, #1
 800275c:	2300      	movne	r3, #0
 800275e:	b2db      	uxtb	r3, r3
 8002760:	66bb      	str	r3, [r7, #104]	; 0x68
	  	  	      //Angle en radians
	  	  	      //angledt2=count*2*3.14/8192-3.14;
	  	  	      angledt2=count*360/8192-180;
 8002762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002764:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8002768:	fb02 f303 	mul.w	r3, r2, r3
 800276c:	2b00      	cmp	r3, #0
 800276e:	da02      	bge.n	8002776 <main+0xfa>
 8002770:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 8002774:	331f      	adds	r3, #31
 8002776:	135b      	asrs	r3, r3, #13
 8002778:	3bb4      	subs	r3, #180	; 0xb4
 800277a:	663b      	str	r3, [r7, #96]	; 0x60

	  	  	      //Calcul avec potar
	  	  	  	  HAL_ADC_Start(&hadc1);
 800277c:	4828      	ldr	r0, [pc, #160]	; (8002820 <main+0x1a4>)
 800277e:	f7fe f9c3 	bl	8000b08 <HAL_ADC_Start>
	  	  	  	  HAL_ADC_PollForConversion(&hadc1, 100);
 8002782:	2164      	movs	r1, #100	; 0x64
 8002784:	4826      	ldr	r0, [pc, #152]	; (8002820 <main+0x1a4>)
 8002786:	f7fe fa65 	bl	8000c54 <HAL_ADC_PollForConversion>
	  	  	  	  potar=HAL_ADC_GetValue(&hadc1);
 800278a:	4825      	ldr	r0, [pc, #148]	; (8002820 <main+0x1a4>)
 800278c:	f7fe fae6 	bl	8000d5c <HAL_ADC_GetValue>
 8002790:	4603      	mov	r3, r0
 8002792:	4618      	mov	r0, r3
 8002794:	f7fd febe 	bl	8000514 <__aeabi_ui2d>
 8002798:	4603      	mov	r3, r0
 800279a:	460c      	mov	r4, r1
 800279c:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	  	  	  	  potardt2=(int)potar*100;
 80027a0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80027a4:	f7fd ff30 	bl	8000608 <__aeabi_d2iz>
 80027a8:	4602      	mov	r2, r0
 80027aa:	2364      	movs	r3, #100	; 0x64
 80027ac:	fb03 f302 	mul.w	r3, r3, r2
 80027b0:	67bb      	str	r3, [r7, #120]	; 0x78
	  	  	  	  //*2*PI/(4096)+PI/2;

	  	  	      //Envoi vitesse encodeur + potar
	  	  	      if(sens == __HAL_TIM_DIRECTION_STATUS(&htim1))
 80027b2:	4b19      	ldr	r3, [pc, #100]	; (8002818 <main+0x19c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0310 	and.w	r3, r3, #16
 80027bc:	2b10      	cmp	r3, #16
 80027be:	bf0c      	ite	eq
 80027c0:	2301      	moveq	r3, #1
 80027c2:	2300      	movne	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	461a      	mov	r2, r3
 80027c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027ca:	4293      	cmp	r3, r2
 80027cc:	f47f af7e 	bne.w	80026cc <main+0x50>
	  	  	      {
	  	  	      vitesse=(angledt2-angledt1)*50;
 80027d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80027d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2232      	movs	r2, #50	; 0x32
 80027d8:	fb02 f303 	mul.w	r3, r2, r3
 80027dc:	677b      	str	r3, [r7, #116]	; 0x74
	  	  	      //vitesseP=(potardt2-potardt1)*20;
	  	  	      vitesseP=potardt2;
 80027de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027e0:	673b      	str	r3, [r7, #112]	; 0x70
	  	  	  	  sprintf(vitesse2, "%d",vitesse);
 80027e2:	f107 0314 	add.w	r3, r7, #20
 80027e6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80027e8:	490e      	ldr	r1, [pc, #56]	; (8002824 <main+0x1a8>)
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 fb98 	bl	8002f20 <siprintf>
	  	  	  	  sprintf(vitesseP2, "%d",vitesseP);
 80027f0:	f107 0308 	add.w	r3, r7, #8
 80027f4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80027f6:	490b      	ldr	r1, [pc, #44]	; (8002824 <main+0x1a8>)
 80027f8:	4618      	mov	r0, r3
 80027fa:	f000 fb91 	bl	8002f20 <siprintf>

	  	  	      debugPrint(&huart2, vitesse2);
 80027fe:	f107 0314 	add.w	r3, r7, #20
 8002802:	4619      	mov	r1, r3
 8002804:	4808      	ldr	r0, [pc, #32]	; (8002828 <main+0x1ac>)
 8002806:	f000 f963 	bl	8002ad0 <debugPrint>
	  	  	      debugPrint(&huart2, vitesseP2);
 800280a:	f107 0308 	add.w	r3, r7, #8
 800280e:	4619      	mov	r1, r3
 8002810:	4805      	ldr	r0, [pc, #20]	; (8002828 <main+0x1ac>)
 8002812:	f000 f95d 	bl	8002ad0 <debugPrint>
	  HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 8002816:	e759      	b.n	80026cc <main+0x50>
 8002818:	200000e4 	.word	0x200000e4
 800281c:	40010000 	.word	0x40010000
 8002820:	2000009c 	.word	0x2000009c
 8002824:	08003744 	.word	0x08003744
 8002828:	20000124 	.word	0x20000124

0800282c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b094      	sub	sp, #80	; 0x50
 8002830:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002832:	f107 0320 	add.w	r3, r7, #32
 8002836:	2230      	movs	r2, #48	; 0x30
 8002838:	2100      	movs	r1, #0
 800283a:	4618      	mov	r0, r3
 800283c:	f000 fb68 	bl	8002f10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002840:	f107 030c 	add.w	r3, r7, #12
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	605a      	str	r2, [r3, #4]
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	60da      	str	r2, [r3, #12]
 800284e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002850:	2300      	movs	r3, #0
 8002852:	60bb      	str	r3, [r7, #8]
 8002854:	4b28      	ldr	r3, [pc, #160]	; (80028f8 <SystemClock_Config+0xcc>)
 8002856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002858:	4a27      	ldr	r2, [pc, #156]	; (80028f8 <SystemClock_Config+0xcc>)
 800285a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800285e:	6413      	str	r3, [r2, #64]	; 0x40
 8002860:	4b25      	ldr	r3, [pc, #148]	; (80028f8 <SystemClock_Config+0xcc>)
 8002862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002868:	60bb      	str	r3, [r7, #8]
 800286a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800286c:	2300      	movs	r3, #0
 800286e:	607b      	str	r3, [r7, #4]
 8002870:	4b22      	ldr	r3, [pc, #136]	; (80028fc <SystemClock_Config+0xd0>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a21      	ldr	r2, [pc, #132]	; (80028fc <SystemClock_Config+0xd0>)
 8002876:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800287a:	6013      	str	r3, [r2, #0]
 800287c:	4b1f      	ldr	r3, [pc, #124]	; (80028fc <SystemClock_Config+0xd0>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002884:	607b      	str	r3, [r7, #4]
 8002886:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002888:	2302      	movs	r3, #2
 800288a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800288c:	2301      	movs	r3, #1
 800288e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002890:	2310      	movs	r3, #16
 8002892:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002894:	2302      	movs	r3, #2
 8002896:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002898:	2300      	movs	r3, #0
 800289a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800289c:	2310      	movs	r3, #16
 800289e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80028a0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80028a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80028a6:	2304      	movs	r3, #4
 80028a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80028aa:	2304      	movs	r3, #4
 80028ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028ae:	f107 0320 	add.w	r3, r7, #32
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fe fdc4 	bl	8001440 <HAL_RCC_OscConfig>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80028be:	f000 f924 	bl	8002b0a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028c2:	230f      	movs	r3, #15
 80028c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028c6:	2302      	movs	r3, #2
 80028c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028ca:	2300      	movs	r3, #0
 80028cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028d4:	2300      	movs	r3, #0
 80028d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028d8:	f107 030c 	add.w	r3, r7, #12
 80028dc:	2102      	movs	r1, #2
 80028de:	4618      	mov	r0, r3
 80028e0:	f7fe fff0 	bl	80018c4 <HAL_RCC_ClockConfig>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80028ea:	f000 f90e 	bl	8002b0a <Error_Handler>
  }
}
 80028ee:	bf00      	nop
 80028f0:	3750      	adds	r7, #80	; 0x50
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40023800 	.word	0x40023800
 80028fc:	40007000 	.word	0x40007000

08002900 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8002904:	4b18      	ldr	r3, [pc, #96]	; (8002968 <MX_ADC1_Init+0x68>)
 8002906:	4a19      	ldr	r2, [pc, #100]	; (800296c <MX_ADC1_Init+0x6c>)
 8002908:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800290a:	4b17      	ldr	r3, [pc, #92]	; (8002968 <MX_ADC1_Init+0x68>)
 800290c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002910:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002912:	4b15      	ldr	r3, [pc, #84]	; (8002968 <MX_ADC1_Init+0x68>)
 8002914:	2200      	movs	r2, #0
 8002916:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002918:	4b13      	ldr	r3, [pc, #76]	; (8002968 <MX_ADC1_Init+0x68>)
 800291a:	2200      	movs	r2, #0
 800291c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800291e:	4b12      	ldr	r3, [pc, #72]	; (8002968 <MX_ADC1_Init+0x68>)
 8002920:	2200      	movs	r2, #0
 8002922:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002924:	4b10      	ldr	r3, [pc, #64]	; (8002968 <MX_ADC1_Init+0x68>)
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800292c:	4b0e      	ldr	r3, [pc, #56]	; (8002968 <MX_ADC1_Init+0x68>)
 800292e:	2200      	movs	r2, #0
 8002930:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002932:	4b0d      	ldr	r3, [pc, #52]	; (8002968 <MX_ADC1_Init+0x68>)
 8002934:	4a0e      	ldr	r2, [pc, #56]	; (8002970 <MX_ADC1_Init+0x70>)
 8002936:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002938:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <MX_ADC1_Init+0x68>)
 800293a:	2200      	movs	r2, #0
 800293c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800293e:	4b0a      	ldr	r3, [pc, #40]	; (8002968 <MX_ADC1_Init+0x68>)
 8002940:	2201      	movs	r2, #1
 8002942:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002944:	4b08      	ldr	r3, [pc, #32]	; (8002968 <MX_ADC1_Init+0x68>)
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800294c:	4b06      	ldr	r3, [pc, #24]	; (8002968 <MX_ADC1_Init+0x68>)
 800294e:	2201      	movs	r2, #1
 8002950:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002952:	4805      	ldr	r0, [pc, #20]	; (8002968 <MX_ADC1_Init+0x68>)
 8002954:	f7fe f894 	bl	8000a80 <HAL_ADC_Init>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <MX_ADC1_Init+0x62>
  {
    Error_Handler();
 800295e:	f000 f8d4 	bl	8002b0a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	2000009c 	.word	0x2000009c
 800296c:	40012000 	.word	0x40012000
 8002970:	0f000001 	.word	0x0f000001

08002974 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b08c      	sub	sp, #48	; 0x30
 8002978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800297a:	f107 030c 	add.w	r3, r7, #12
 800297e:	2224      	movs	r2, #36	; 0x24
 8002980:	2100      	movs	r1, #0
 8002982:	4618      	mov	r0, r3
 8002984:	f000 fac4 	bl	8002f10 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002988:	1d3b      	adds	r3, r7, #4
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002990:	4b24      	ldr	r3, [pc, #144]	; (8002a24 <MX_TIM1_Init+0xb0>)
 8002992:	4a25      	ldr	r2, [pc, #148]	; (8002a28 <MX_TIM1_Init+0xb4>)
 8002994:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002996:	4b23      	ldr	r3, [pc, #140]	; (8002a24 <MX_TIM1_Init+0xb0>)
 8002998:	2200      	movs	r2, #0
 800299a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800299c:	4b21      	ldr	r3, [pc, #132]	; (8002a24 <MX_TIM1_Init+0xb0>)
 800299e:	2200      	movs	r2, #0
 80029a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8192;
 80029a2:	4b20      	ldr	r3, [pc, #128]	; (8002a24 <MX_TIM1_Init+0xb0>)
 80029a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029aa:	4b1e      	ldr	r3, [pc, #120]	; (8002a24 <MX_TIM1_Init+0xb0>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80029b0:	4b1c      	ldr	r3, [pc, #112]	; (8002a24 <MX_TIM1_Init+0xb0>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029b6:	4b1b      	ldr	r3, [pc, #108]	; (8002a24 <MX_TIM1_Init+0xb0>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80029bc:	2303      	movs	r3, #3
 80029be:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80029c0:	2300      	movs	r3, #0
 80029c2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80029c4:	2301      	movs	r3, #1
 80029c6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80029c8:	2300      	movs	r3, #0
 80029ca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80029cc:	2300      	movs	r3, #0
 80029ce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80029d0:	2300      	movs	r3, #0
 80029d2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80029d4:	2301      	movs	r3, #1
 80029d6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80029d8:	2300      	movs	r3, #0
 80029da:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80029dc:	2300      	movs	r3, #0
 80029de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80029e0:	f107 030c 	add.w	r3, r7, #12
 80029e4:	4619      	mov	r1, r3
 80029e6:	480f      	ldr	r0, [pc, #60]	; (8002a24 <MX_TIM1_Init+0xb0>)
 80029e8:	f7ff f95a 	bl	8001ca0 <HAL_TIM_Encoder_Init>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80029f2:	f000 f88a 	bl	8002b0a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029f6:	2300      	movs	r3, #0
 80029f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029fa:	2300      	movs	r3, #0
 80029fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80029fe:	1d3b      	adds	r3, r7, #4
 8002a00:	4619      	mov	r1, r3
 8002a02:	4808      	ldr	r0, [pc, #32]	; (8002a24 <MX_TIM1_Init+0xb0>)
 8002a04:	f7ff fabb 	bl	8001f7e <HAL_TIMEx_MasterConfigSynchronization>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002a0e:	f000 f87c 	bl	8002b0a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  TIM1->CNT=4096;
 8002a12:	4b05      	ldr	r3, [pc, #20]	; (8002a28 <MX_TIM1_Init+0xb4>)
 8002a14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a18:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE END TIM1_Init 2 */

}
 8002a1a:	bf00      	nop
 8002a1c:	3730      	adds	r7, #48	; 0x30
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	200000e4 	.word	0x200000e4
 8002a28:	40010000 	.word	0x40010000

08002a2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a30:	4b11      	ldr	r3, [pc, #68]	; (8002a78 <MX_USART2_UART_Init+0x4c>)
 8002a32:	4a12      	ldr	r2, [pc, #72]	; (8002a7c <MX_USART2_UART_Init+0x50>)
 8002a34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002a36:	4b10      	ldr	r3, [pc, #64]	; (8002a78 <MX_USART2_UART_Init+0x4c>)
 8002a38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a3e:	4b0e      	ldr	r3, [pc, #56]	; (8002a78 <MX_USART2_UART_Init+0x4c>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a44:	4b0c      	ldr	r3, [pc, #48]	; (8002a78 <MX_USART2_UART_Init+0x4c>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a4a:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <MX_USART2_UART_Init+0x4c>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a50:	4b09      	ldr	r3, [pc, #36]	; (8002a78 <MX_USART2_UART_Init+0x4c>)
 8002a52:	220c      	movs	r2, #12
 8002a54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a56:	4b08      	ldr	r3, [pc, #32]	; (8002a78 <MX_USART2_UART_Init+0x4c>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a5c:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <MX_USART2_UART_Init+0x4c>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a62:	4805      	ldr	r0, [pc, #20]	; (8002a78 <MX_USART2_UART_Init+0x4c>)
 8002a64:	f7ff fad0 	bl	8002008 <HAL_UART_Init>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002a6e:	f000 f84c 	bl	8002b0a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a72:	bf00      	nop
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	20000124 	.word	0x20000124
 8002a7c:	40004400 	.word	0x40004400

08002a80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	607b      	str	r3, [r7, #4]
 8002a8a:	4b10      	ldr	r3, [pc, #64]	; (8002acc <MX_GPIO_Init+0x4c>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	4a0f      	ldr	r2, [pc, #60]	; (8002acc <MX_GPIO_Init+0x4c>)
 8002a90:	f043 0304 	orr.w	r3, r3, #4
 8002a94:	6313      	str	r3, [r2, #48]	; 0x30
 8002a96:	4b0d      	ldr	r3, [pc, #52]	; (8002acc <MX_GPIO_Init+0x4c>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	f003 0304 	and.w	r3, r3, #4
 8002a9e:	607b      	str	r3, [r7, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	603b      	str	r3, [r7, #0]
 8002aa6:	4b09      	ldr	r3, [pc, #36]	; (8002acc <MX_GPIO_Init+0x4c>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	4a08      	ldr	r2, [pc, #32]	; (8002acc <MX_GPIO_Init+0x4c>)
 8002aac:	f043 0301 	orr.w	r3, r3, #1
 8002ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab2:	4b06      	ldr	r3, [pc, #24]	; (8002acc <MX_GPIO_Init+0x4c>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	603b      	str	r3, [r7, #0]
 8002abc:	683b      	ldr	r3, [r7, #0]

}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	40023800 	.word	0x40023800

08002ad0 <debugPrint>:

/* USER CODE BEGIN 4 */
void debugPrint(UART_HandleTypeDef *huart, char _out[]){
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
 HAL_UART_Transmit(huart, (uint8_t *) _out, strlen(_out), 10);
 8002ada:	6838      	ldr	r0, [r7, #0]
 8002adc:	f7fd fb80 	bl	80001e0 <strlen>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	230a      	movs	r3, #10
 8002ae6:	6839      	ldr	r1, [r7, #0]
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f7ff fada 	bl	80020a2 <HAL_UART_Transmit>
 char newline[2] = "\r\n";
 8002aee:	f640 230d 	movw	r3, #2573	; 0xa0d
 8002af2:	81bb      	strh	r3, [r7, #12]
 HAL_UART_Transmit(huart, (uint8_t *) newline, 2, 10);
 8002af4:	f107 010c 	add.w	r1, r7, #12
 8002af8:	230a      	movs	r3, #10
 8002afa:	2202      	movs	r2, #2
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f7ff fad0 	bl	80020a2 <HAL_UART_Transmit>
}
 8002b02:	bf00      	nop
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002b0e:	bf00      	nop
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b1e:	2300      	movs	r3, #0
 8002b20:	607b      	str	r3, [r7, #4]
 8002b22:	4b10      	ldr	r3, [pc, #64]	; (8002b64 <HAL_MspInit+0x4c>)
 8002b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b26:	4a0f      	ldr	r2, [pc, #60]	; (8002b64 <HAL_MspInit+0x4c>)
 8002b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b2e:	4b0d      	ldr	r3, [pc, #52]	; (8002b64 <HAL_MspInit+0x4c>)
 8002b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b36:	607b      	str	r3, [r7, #4]
 8002b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	603b      	str	r3, [r7, #0]
 8002b3e:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <HAL_MspInit+0x4c>)
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	4a08      	ldr	r2, [pc, #32]	; (8002b64 <HAL_MspInit+0x4c>)
 8002b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b48:	6413      	str	r3, [r2, #64]	; 0x40
 8002b4a:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <HAL_MspInit+0x4c>)
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b52:	603b      	str	r3, [r7, #0]
 8002b54:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002b56:	2007      	movs	r0, #7
 8002b58:	f7fe fabc 	bl	80010d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b5c:	bf00      	nop
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40023800 	.word	0x40023800

08002b68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08a      	sub	sp, #40	; 0x28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b70:	f107 0314 	add.w	r3, r7, #20
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	60da      	str	r2, [r3, #12]
 8002b7e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a24      	ldr	r2, [pc, #144]	; (8002c18 <HAL_ADC_MspInit+0xb0>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d141      	bne.n	8002c0e <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	4b23      	ldr	r3, [pc, #140]	; (8002c1c <HAL_ADC_MspInit+0xb4>)
 8002b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b92:	4a22      	ldr	r2, [pc, #136]	; (8002c1c <HAL_ADC_MspInit+0xb4>)
 8002b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b98:	6453      	str	r3, [r2, #68]	; 0x44
 8002b9a:	4b20      	ldr	r3, [pc, #128]	; (8002c1c <HAL_ADC_MspInit+0xb4>)
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	4b1c      	ldr	r3, [pc, #112]	; (8002c1c <HAL_ADC_MspInit+0xb4>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bae:	4a1b      	ldr	r2, [pc, #108]	; (8002c1c <HAL_ADC_MspInit+0xb4>)
 8002bb0:	f043 0304 	orr.w	r3, r3, #4
 8002bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb6:	4b19      	ldr	r3, [pc, #100]	; (8002c1c <HAL_ADC_MspInit+0xb4>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	f003 0304 	and.w	r3, r3, #4
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	4b15      	ldr	r3, [pc, #84]	; (8002c1c <HAL_ADC_MspInit+0xb4>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	4a14      	ldr	r2, [pc, #80]	; (8002c1c <HAL_ADC_MspInit+0xb4>)
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd2:	4b12      	ldr	r3, [pc, #72]	; (8002c1c <HAL_ADC_MspInit+0xb4>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	60bb      	str	r3, [r7, #8]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002bde:	2301      	movs	r3, #1
 8002be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002be2:	2303      	movs	r3, #3
 8002be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be6:	2300      	movs	r3, #0
 8002be8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bea:	f107 0314 	add.w	r3, r7, #20
 8002bee:	4619      	mov	r1, r3
 8002bf0:	480b      	ldr	r0, [pc, #44]	; (8002c20 <HAL_ADC_MspInit+0xb8>)
 8002bf2:	f7fe faa3 	bl	800113c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c02:	f107 0314 	add.w	r3, r7, #20
 8002c06:	4619      	mov	r1, r3
 8002c08:	4806      	ldr	r0, [pc, #24]	; (8002c24 <HAL_ADC_MspInit+0xbc>)
 8002c0a:	f7fe fa97 	bl	800113c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002c0e:	bf00      	nop
 8002c10:	3728      	adds	r7, #40	; 0x28
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40012000 	.word	0x40012000
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	40020800 	.word	0x40020800
 8002c24:	40020000 	.word	0x40020000

08002c28 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b08a      	sub	sp, #40	; 0x28
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c30:	f107 0314 	add.w	r3, r7, #20
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	605a      	str	r2, [r3, #4]
 8002c3a:	609a      	str	r2, [r3, #8]
 8002c3c:	60da      	str	r2, [r3, #12]
 8002c3e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a19      	ldr	r2, [pc, #100]	; (8002cac <HAL_TIM_Encoder_MspInit+0x84>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d12c      	bne.n	8002ca4 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	613b      	str	r3, [r7, #16]
 8002c4e:	4b18      	ldr	r3, [pc, #96]	; (8002cb0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c52:	4a17      	ldr	r2, [pc, #92]	; (8002cb0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002c54:	f043 0301 	orr.w	r3, r3, #1
 8002c58:	6453      	str	r3, [r2, #68]	; 0x44
 8002c5a:	4b15      	ldr	r3, [pc, #84]	; (8002cb0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	613b      	str	r3, [r7, #16]
 8002c64:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c66:	2300      	movs	r3, #0
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	4b11      	ldr	r3, [pc, #68]	; (8002cb0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	4a10      	ldr	r2, [pc, #64]	; (8002cb0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002c70:	f043 0301 	orr.w	r3, r3, #1
 8002c74:	6313      	str	r3, [r2, #48]	; 0x30
 8002c76:	4b0e      	ldr	r3, [pc, #56]	; (8002cb0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	60fb      	str	r3, [r7, #12]
 8002c80:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c88:	2302      	movs	r3, #2
 8002c8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c90:	2300      	movs	r3, #0
 8002c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c94:	2301      	movs	r3, #1
 8002c96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c98:	f107 0314 	add.w	r3, r7, #20
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4805      	ldr	r0, [pc, #20]	; (8002cb4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002ca0:	f7fe fa4c 	bl	800113c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002ca4:	bf00      	nop
 8002ca6:	3728      	adds	r7, #40	; 0x28
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	40010000 	.word	0x40010000
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	40020000 	.word	0x40020000

08002cb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08a      	sub	sp, #40	; 0x28
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc0:	f107 0314 	add.w	r3, r7, #20
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	609a      	str	r2, [r3, #8]
 8002ccc:	60da      	str	r2, [r3, #12]
 8002cce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a19      	ldr	r2, [pc, #100]	; (8002d3c <HAL_UART_MspInit+0x84>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d12b      	bne.n	8002d32 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cda:	2300      	movs	r3, #0
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	4b18      	ldr	r3, [pc, #96]	; (8002d40 <HAL_UART_MspInit+0x88>)
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	4a17      	ldr	r2, [pc, #92]	; (8002d40 <HAL_UART_MspInit+0x88>)
 8002ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cea:	4b15      	ldr	r3, [pc, #84]	; (8002d40 <HAL_UART_MspInit+0x88>)
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf2:	613b      	str	r3, [r7, #16]
 8002cf4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	4b11      	ldr	r3, [pc, #68]	; (8002d40 <HAL_UART_MspInit+0x88>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	4a10      	ldr	r2, [pc, #64]	; (8002d40 <HAL_UART_MspInit+0x88>)
 8002d00:	f043 0301 	orr.w	r3, r3, #1
 8002d04:	6313      	str	r3, [r2, #48]	; 0x30
 8002d06:	4b0e      	ldr	r3, [pc, #56]	; (8002d40 <HAL_UART_MspInit+0x88>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d12:	230c      	movs	r3, #12
 8002d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d16:	2302      	movs	r3, #2
 8002d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d22:	2307      	movs	r3, #7
 8002d24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d26:	f107 0314 	add.w	r3, r7, #20
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4805      	ldr	r0, [pc, #20]	; (8002d44 <HAL_UART_MspInit+0x8c>)
 8002d2e:	f7fe fa05 	bl	800113c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002d32:	bf00      	nop
 8002d34:	3728      	adds	r7, #40	; 0x28
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40004400 	.word	0x40004400
 8002d40:	40023800 	.word	0x40023800
 8002d44:	40020000 	.word	0x40020000

08002d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002d4c:	bf00      	nop
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d56:	b480      	push	{r7}
 8002d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d5a:	e7fe      	b.n	8002d5a <HardFault_Handler+0x4>

08002d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d60:	e7fe      	b.n	8002d60 <MemManage_Handler+0x4>

08002d62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d62:	b480      	push	{r7}
 8002d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d66:	e7fe      	b.n	8002d66 <BusFault_Handler+0x4>

08002d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d6c:	e7fe      	b.n	8002d6c <UsageFault_Handler+0x4>

08002d6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d72:	bf00      	nop
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d80:	bf00      	nop
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d8e:	bf00      	nop
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d9c:	f7fd fe2e 	bl	80009fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002da0:	bf00      	nop
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002dac:	4b11      	ldr	r3, [pc, #68]	; (8002df4 <_sbrk+0x50>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d102      	bne.n	8002dba <_sbrk+0x16>
		heap_end = &end;
 8002db4:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <_sbrk+0x50>)
 8002db6:	4a10      	ldr	r2, [pc, #64]	; (8002df8 <_sbrk+0x54>)
 8002db8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002dba:	4b0e      	ldr	r3, [pc, #56]	; (8002df4 <_sbrk+0x50>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002dc0:	4b0c      	ldr	r3, [pc, #48]	; (8002df4 <_sbrk+0x50>)
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	466a      	mov	r2, sp
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d907      	bls.n	8002dde <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002dce:	f000 f875 	bl	8002ebc <__errno>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	230c      	movs	r3, #12
 8002dd6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ddc:	e006      	b.n	8002dec <_sbrk+0x48>
	}

	heap_end += incr;
 8002dde:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <_sbrk+0x50>)
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4413      	add	r3, r2
 8002de6:	4a03      	ldr	r2, [pc, #12]	; (8002df4 <_sbrk+0x50>)
 8002de8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002dea:	68fb      	ldr	r3, [r7, #12]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	2000008c 	.word	0x2000008c
 8002df8:	20000168 	.word	0x20000168

08002dfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e00:	4b16      	ldr	r3, [pc, #88]	; (8002e5c <SystemInit+0x60>)
 8002e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e06:	4a15      	ldr	r2, [pc, #84]	; (8002e5c <SystemInit+0x60>)
 8002e08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002e10:	4b13      	ldr	r3, [pc, #76]	; (8002e60 <SystemInit+0x64>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a12      	ldr	r2, [pc, #72]	; (8002e60 <SystemInit+0x64>)
 8002e16:	f043 0301 	orr.w	r3, r3, #1
 8002e1a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002e1c:	4b10      	ldr	r3, [pc, #64]	; (8002e60 <SystemInit+0x64>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002e22:	4b0f      	ldr	r3, [pc, #60]	; (8002e60 <SystemInit+0x64>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a0e      	ldr	r2, [pc, #56]	; (8002e60 <SystemInit+0x64>)
 8002e28:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002e2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e30:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002e32:	4b0b      	ldr	r3, [pc, #44]	; (8002e60 <SystemInit+0x64>)
 8002e34:	4a0b      	ldr	r2, [pc, #44]	; (8002e64 <SystemInit+0x68>)
 8002e36:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002e38:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <SystemInit+0x64>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a08      	ldr	r2, [pc, #32]	; (8002e60 <SystemInit+0x64>)
 8002e3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e42:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002e44:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <SystemInit+0x64>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e4a:	4b04      	ldr	r3, [pc, #16]	; (8002e5c <SystemInit+0x60>)
 8002e4c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e50:	609a      	str	r2, [r3, #8]
#endif
}
 8002e52:	bf00      	nop
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr
 8002e5c:	e000ed00 	.word	0xe000ed00
 8002e60:	40023800 	.word	0x40023800
 8002e64:	24003010 	.word	0x24003010

08002e68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ea0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002e6c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002e6e:	e003      	b.n	8002e78 <LoopCopyDataInit>

08002e70 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002e70:	4b0c      	ldr	r3, [pc, #48]	; (8002ea4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002e72:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002e74:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002e76:	3104      	adds	r1, #4

08002e78 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002e78:	480b      	ldr	r0, [pc, #44]	; (8002ea8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002e7a:	4b0c      	ldr	r3, [pc, #48]	; (8002eac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002e7c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002e7e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002e80:	d3f6      	bcc.n	8002e70 <CopyDataInit>
  ldr  r2, =_sbss
 8002e82:	4a0b      	ldr	r2, [pc, #44]	; (8002eb0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002e84:	e002      	b.n	8002e8c <LoopFillZerobss>

08002e86 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002e86:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002e88:	f842 3b04 	str.w	r3, [r2], #4

08002e8c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002e8c:	4b09      	ldr	r3, [pc, #36]	; (8002eb4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002e8e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002e90:	d3f9      	bcc.n	8002e86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e92:	f7ff ffb3 	bl	8002dfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e96:	f000 f817 	bl	8002ec8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e9a:	f7ff fbef 	bl	800267c <main>
  bx  lr    
 8002e9e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ea0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002ea4:	080037a4 	.word	0x080037a4
  ldr  r0, =_sdata
 8002ea8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002eac:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8002eb0:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8002eb4:	20000168 	.word	0x20000168

08002eb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002eb8:	e7fe      	b.n	8002eb8 <ADC_IRQHandler>
	...

08002ebc <__errno>:
 8002ebc:	4b01      	ldr	r3, [pc, #4]	; (8002ec4 <__errno+0x8>)
 8002ebe:	6818      	ldr	r0, [r3, #0]
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	2000000c 	.word	0x2000000c

08002ec8 <__libc_init_array>:
 8002ec8:	b570      	push	{r4, r5, r6, lr}
 8002eca:	4e0d      	ldr	r6, [pc, #52]	; (8002f00 <__libc_init_array+0x38>)
 8002ecc:	4c0d      	ldr	r4, [pc, #52]	; (8002f04 <__libc_init_array+0x3c>)
 8002ece:	1ba4      	subs	r4, r4, r6
 8002ed0:	10a4      	asrs	r4, r4, #2
 8002ed2:	2500      	movs	r5, #0
 8002ed4:	42a5      	cmp	r5, r4
 8002ed6:	d109      	bne.n	8002eec <__libc_init_array+0x24>
 8002ed8:	4e0b      	ldr	r6, [pc, #44]	; (8002f08 <__libc_init_array+0x40>)
 8002eda:	4c0c      	ldr	r4, [pc, #48]	; (8002f0c <__libc_init_array+0x44>)
 8002edc:	f000 fc26 	bl	800372c <_init>
 8002ee0:	1ba4      	subs	r4, r4, r6
 8002ee2:	10a4      	asrs	r4, r4, #2
 8002ee4:	2500      	movs	r5, #0
 8002ee6:	42a5      	cmp	r5, r4
 8002ee8:	d105      	bne.n	8002ef6 <__libc_init_array+0x2e>
 8002eea:	bd70      	pop	{r4, r5, r6, pc}
 8002eec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ef0:	4798      	blx	r3
 8002ef2:	3501      	adds	r5, #1
 8002ef4:	e7ee      	b.n	8002ed4 <__libc_init_array+0xc>
 8002ef6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002efa:	4798      	blx	r3
 8002efc:	3501      	adds	r5, #1
 8002efe:	e7f2      	b.n	8002ee6 <__libc_init_array+0x1e>
 8002f00:	0800379c 	.word	0x0800379c
 8002f04:	0800379c 	.word	0x0800379c
 8002f08:	0800379c 	.word	0x0800379c
 8002f0c:	080037a0 	.word	0x080037a0

08002f10 <memset>:
 8002f10:	4402      	add	r2, r0
 8002f12:	4603      	mov	r3, r0
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d100      	bne.n	8002f1a <memset+0xa>
 8002f18:	4770      	bx	lr
 8002f1a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f1e:	e7f9      	b.n	8002f14 <memset+0x4>

08002f20 <siprintf>:
 8002f20:	b40e      	push	{r1, r2, r3}
 8002f22:	b500      	push	{lr}
 8002f24:	b09c      	sub	sp, #112	; 0x70
 8002f26:	ab1d      	add	r3, sp, #116	; 0x74
 8002f28:	9002      	str	r0, [sp, #8]
 8002f2a:	9006      	str	r0, [sp, #24]
 8002f2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002f30:	4809      	ldr	r0, [pc, #36]	; (8002f58 <siprintf+0x38>)
 8002f32:	9107      	str	r1, [sp, #28]
 8002f34:	9104      	str	r1, [sp, #16]
 8002f36:	4909      	ldr	r1, [pc, #36]	; (8002f5c <siprintf+0x3c>)
 8002f38:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f3c:	9105      	str	r1, [sp, #20]
 8002f3e:	6800      	ldr	r0, [r0, #0]
 8002f40:	9301      	str	r3, [sp, #4]
 8002f42:	a902      	add	r1, sp, #8
 8002f44:	f000 f866 	bl	8003014 <_svfiprintf_r>
 8002f48:	9b02      	ldr	r3, [sp, #8]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	701a      	strb	r2, [r3, #0]
 8002f4e:	b01c      	add	sp, #112	; 0x70
 8002f50:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f54:	b003      	add	sp, #12
 8002f56:	4770      	bx	lr
 8002f58:	2000000c 	.word	0x2000000c
 8002f5c:	ffff0208 	.word	0xffff0208

08002f60 <__ssputs_r>:
 8002f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f64:	688e      	ldr	r6, [r1, #8]
 8002f66:	429e      	cmp	r6, r3
 8002f68:	4682      	mov	sl, r0
 8002f6a:	460c      	mov	r4, r1
 8002f6c:	4690      	mov	r8, r2
 8002f6e:	4699      	mov	r9, r3
 8002f70:	d837      	bhi.n	8002fe2 <__ssputs_r+0x82>
 8002f72:	898a      	ldrh	r2, [r1, #12]
 8002f74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002f78:	d031      	beq.n	8002fde <__ssputs_r+0x7e>
 8002f7a:	6825      	ldr	r5, [r4, #0]
 8002f7c:	6909      	ldr	r1, [r1, #16]
 8002f7e:	1a6f      	subs	r7, r5, r1
 8002f80:	6965      	ldr	r5, [r4, #20]
 8002f82:	2302      	movs	r3, #2
 8002f84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002f88:	fb95 f5f3 	sdiv	r5, r5, r3
 8002f8c:	f109 0301 	add.w	r3, r9, #1
 8002f90:	443b      	add	r3, r7
 8002f92:	429d      	cmp	r5, r3
 8002f94:	bf38      	it	cc
 8002f96:	461d      	movcc	r5, r3
 8002f98:	0553      	lsls	r3, r2, #21
 8002f9a:	d530      	bpl.n	8002ffe <__ssputs_r+0x9e>
 8002f9c:	4629      	mov	r1, r5
 8002f9e:	f000 fb2b 	bl	80035f8 <_malloc_r>
 8002fa2:	4606      	mov	r6, r0
 8002fa4:	b950      	cbnz	r0, 8002fbc <__ssputs_r+0x5c>
 8002fa6:	230c      	movs	r3, #12
 8002fa8:	f8ca 3000 	str.w	r3, [sl]
 8002fac:	89a3      	ldrh	r3, [r4, #12]
 8002fae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fb2:	81a3      	strh	r3, [r4, #12]
 8002fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fbc:	463a      	mov	r2, r7
 8002fbe:	6921      	ldr	r1, [r4, #16]
 8002fc0:	f000 faa8 	bl	8003514 <memcpy>
 8002fc4:	89a3      	ldrh	r3, [r4, #12]
 8002fc6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002fca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fce:	81a3      	strh	r3, [r4, #12]
 8002fd0:	6126      	str	r6, [r4, #16]
 8002fd2:	6165      	str	r5, [r4, #20]
 8002fd4:	443e      	add	r6, r7
 8002fd6:	1bed      	subs	r5, r5, r7
 8002fd8:	6026      	str	r6, [r4, #0]
 8002fda:	60a5      	str	r5, [r4, #8]
 8002fdc:	464e      	mov	r6, r9
 8002fde:	454e      	cmp	r6, r9
 8002fe0:	d900      	bls.n	8002fe4 <__ssputs_r+0x84>
 8002fe2:	464e      	mov	r6, r9
 8002fe4:	4632      	mov	r2, r6
 8002fe6:	4641      	mov	r1, r8
 8002fe8:	6820      	ldr	r0, [r4, #0]
 8002fea:	f000 fa9e 	bl	800352a <memmove>
 8002fee:	68a3      	ldr	r3, [r4, #8]
 8002ff0:	1b9b      	subs	r3, r3, r6
 8002ff2:	60a3      	str	r3, [r4, #8]
 8002ff4:	6823      	ldr	r3, [r4, #0]
 8002ff6:	441e      	add	r6, r3
 8002ff8:	6026      	str	r6, [r4, #0]
 8002ffa:	2000      	movs	r0, #0
 8002ffc:	e7dc      	b.n	8002fb8 <__ssputs_r+0x58>
 8002ffe:	462a      	mov	r2, r5
 8003000:	f000 fb54 	bl	80036ac <_realloc_r>
 8003004:	4606      	mov	r6, r0
 8003006:	2800      	cmp	r0, #0
 8003008:	d1e2      	bne.n	8002fd0 <__ssputs_r+0x70>
 800300a:	6921      	ldr	r1, [r4, #16]
 800300c:	4650      	mov	r0, sl
 800300e:	f000 faa5 	bl	800355c <_free_r>
 8003012:	e7c8      	b.n	8002fa6 <__ssputs_r+0x46>

08003014 <_svfiprintf_r>:
 8003014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003018:	461d      	mov	r5, r3
 800301a:	898b      	ldrh	r3, [r1, #12]
 800301c:	061f      	lsls	r7, r3, #24
 800301e:	b09d      	sub	sp, #116	; 0x74
 8003020:	4680      	mov	r8, r0
 8003022:	460c      	mov	r4, r1
 8003024:	4616      	mov	r6, r2
 8003026:	d50f      	bpl.n	8003048 <_svfiprintf_r+0x34>
 8003028:	690b      	ldr	r3, [r1, #16]
 800302a:	b96b      	cbnz	r3, 8003048 <_svfiprintf_r+0x34>
 800302c:	2140      	movs	r1, #64	; 0x40
 800302e:	f000 fae3 	bl	80035f8 <_malloc_r>
 8003032:	6020      	str	r0, [r4, #0]
 8003034:	6120      	str	r0, [r4, #16]
 8003036:	b928      	cbnz	r0, 8003044 <_svfiprintf_r+0x30>
 8003038:	230c      	movs	r3, #12
 800303a:	f8c8 3000 	str.w	r3, [r8]
 800303e:	f04f 30ff 	mov.w	r0, #4294967295
 8003042:	e0c8      	b.n	80031d6 <_svfiprintf_r+0x1c2>
 8003044:	2340      	movs	r3, #64	; 0x40
 8003046:	6163      	str	r3, [r4, #20]
 8003048:	2300      	movs	r3, #0
 800304a:	9309      	str	r3, [sp, #36]	; 0x24
 800304c:	2320      	movs	r3, #32
 800304e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003052:	2330      	movs	r3, #48	; 0x30
 8003054:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003058:	9503      	str	r5, [sp, #12]
 800305a:	f04f 0b01 	mov.w	fp, #1
 800305e:	4637      	mov	r7, r6
 8003060:	463d      	mov	r5, r7
 8003062:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003066:	b10b      	cbz	r3, 800306c <_svfiprintf_r+0x58>
 8003068:	2b25      	cmp	r3, #37	; 0x25
 800306a:	d13e      	bne.n	80030ea <_svfiprintf_r+0xd6>
 800306c:	ebb7 0a06 	subs.w	sl, r7, r6
 8003070:	d00b      	beq.n	800308a <_svfiprintf_r+0x76>
 8003072:	4653      	mov	r3, sl
 8003074:	4632      	mov	r2, r6
 8003076:	4621      	mov	r1, r4
 8003078:	4640      	mov	r0, r8
 800307a:	f7ff ff71 	bl	8002f60 <__ssputs_r>
 800307e:	3001      	adds	r0, #1
 8003080:	f000 80a4 	beq.w	80031cc <_svfiprintf_r+0x1b8>
 8003084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003086:	4453      	add	r3, sl
 8003088:	9309      	str	r3, [sp, #36]	; 0x24
 800308a:	783b      	ldrb	r3, [r7, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	f000 809d 	beq.w	80031cc <_svfiprintf_r+0x1b8>
 8003092:	2300      	movs	r3, #0
 8003094:	f04f 32ff 	mov.w	r2, #4294967295
 8003098:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800309c:	9304      	str	r3, [sp, #16]
 800309e:	9307      	str	r3, [sp, #28]
 80030a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80030a4:	931a      	str	r3, [sp, #104]	; 0x68
 80030a6:	462f      	mov	r7, r5
 80030a8:	2205      	movs	r2, #5
 80030aa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80030ae:	4850      	ldr	r0, [pc, #320]	; (80031f0 <_svfiprintf_r+0x1dc>)
 80030b0:	f7fd f89e 	bl	80001f0 <memchr>
 80030b4:	9b04      	ldr	r3, [sp, #16]
 80030b6:	b9d0      	cbnz	r0, 80030ee <_svfiprintf_r+0xda>
 80030b8:	06d9      	lsls	r1, r3, #27
 80030ba:	bf44      	itt	mi
 80030bc:	2220      	movmi	r2, #32
 80030be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80030c2:	071a      	lsls	r2, r3, #28
 80030c4:	bf44      	itt	mi
 80030c6:	222b      	movmi	r2, #43	; 0x2b
 80030c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80030cc:	782a      	ldrb	r2, [r5, #0]
 80030ce:	2a2a      	cmp	r2, #42	; 0x2a
 80030d0:	d015      	beq.n	80030fe <_svfiprintf_r+0xea>
 80030d2:	9a07      	ldr	r2, [sp, #28]
 80030d4:	462f      	mov	r7, r5
 80030d6:	2000      	movs	r0, #0
 80030d8:	250a      	movs	r5, #10
 80030da:	4639      	mov	r1, r7
 80030dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80030e0:	3b30      	subs	r3, #48	; 0x30
 80030e2:	2b09      	cmp	r3, #9
 80030e4:	d94d      	bls.n	8003182 <_svfiprintf_r+0x16e>
 80030e6:	b1b8      	cbz	r0, 8003118 <_svfiprintf_r+0x104>
 80030e8:	e00f      	b.n	800310a <_svfiprintf_r+0xf6>
 80030ea:	462f      	mov	r7, r5
 80030ec:	e7b8      	b.n	8003060 <_svfiprintf_r+0x4c>
 80030ee:	4a40      	ldr	r2, [pc, #256]	; (80031f0 <_svfiprintf_r+0x1dc>)
 80030f0:	1a80      	subs	r0, r0, r2
 80030f2:	fa0b f000 	lsl.w	r0, fp, r0
 80030f6:	4318      	orrs	r0, r3
 80030f8:	9004      	str	r0, [sp, #16]
 80030fa:	463d      	mov	r5, r7
 80030fc:	e7d3      	b.n	80030a6 <_svfiprintf_r+0x92>
 80030fe:	9a03      	ldr	r2, [sp, #12]
 8003100:	1d11      	adds	r1, r2, #4
 8003102:	6812      	ldr	r2, [r2, #0]
 8003104:	9103      	str	r1, [sp, #12]
 8003106:	2a00      	cmp	r2, #0
 8003108:	db01      	blt.n	800310e <_svfiprintf_r+0xfa>
 800310a:	9207      	str	r2, [sp, #28]
 800310c:	e004      	b.n	8003118 <_svfiprintf_r+0x104>
 800310e:	4252      	negs	r2, r2
 8003110:	f043 0302 	orr.w	r3, r3, #2
 8003114:	9207      	str	r2, [sp, #28]
 8003116:	9304      	str	r3, [sp, #16]
 8003118:	783b      	ldrb	r3, [r7, #0]
 800311a:	2b2e      	cmp	r3, #46	; 0x2e
 800311c:	d10c      	bne.n	8003138 <_svfiprintf_r+0x124>
 800311e:	787b      	ldrb	r3, [r7, #1]
 8003120:	2b2a      	cmp	r3, #42	; 0x2a
 8003122:	d133      	bne.n	800318c <_svfiprintf_r+0x178>
 8003124:	9b03      	ldr	r3, [sp, #12]
 8003126:	1d1a      	adds	r2, r3, #4
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	9203      	str	r2, [sp, #12]
 800312c:	2b00      	cmp	r3, #0
 800312e:	bfb8      	it	lt
 8003130:	f04f 33ff 	movlt.w	r3, #4294967295
 8003134:	3702      	adds	r7, #2
 8003136:	9305      	str	r3, [sp, #20]
 8003138:	4d2e      	ldr	r5, [pc, #184]	; (80031f4 <_svfiprintf_r+0x1e0>)
 800313a:	7839      	ldrb	r1, [r7, #0]
 800313c:	2203      	movs	r2, #3
 800313e:	4628      	mov	r0, r5
 8003140:	f7fd f856 	bl	80001f0 <memchr>
 8003144:	b138      	cbz	r0, 8003156 <_svfiprintf_r+0x142>
 8003146:	2340      	movs	r3, #64	; 0x40
 8003148:	1b40      	subs	r0, r0, r5
 800314a:	fa03 f000 	lsl.w	r0, r3, r0
 800314e:	9b04      	ldr	r3, [sp, #16]
 8003150:	4303      	orrs	r3, r0
 8003152:	3701      	adds	r7, #1
 8003154:	9304      	str	r3, [sp, #16]
 8003156:	7839      	ldrb	r1, [r7, #0]
 8003158:	4827      	ldr	r0, [pc, #156]	; (80031f8 <_svfiprintf_r+0x1e4>)
 800315a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800315e:	2206      	movs	r2, #6
 8003160:	1c7e      	adds	r6, r7, #1
 8003162:	f7fd f845 	bl	80001f0 <memchr>
 8003166:	2800      	cmp	r0, #0
 8003168:	d038      	beq.n	80031dc <_svfiprintf_r+0x1c8>
 800316a:	4b24      	ldr	r3, [pc, #144]	; (80031fc <_svfiprintf_r+0x1e8>)
 800316c:	bb13      	cbnz	r3, 80031b4 <_svfiprintf_r+0x1a0>
 800316e:	9b03      	ldr	r3, [sp, #12]
 8003170:	3307      	adds	r3, #7
 8003172:	f023 0307 	bic.w	r3, r3, #7
 8003176:	3308      	adds	r3, #8
 8003178:	9303      	str	r3, [sp, #12]
 800317a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800317c:	444b      	add	r3, r9
 800317e:	9309      	str	r3, [sp, #36]	; 0x24
 8003180:	e76d      	b.n	800305e <_svfiprintf_r+0x4a>
 8003182:	fb05 3202 	mla	r2, r5, r2, r3
 8003186:	2001      	movs	r0, #1
 8003188:	460f      	mov	r7, r1
 800318a:	e7a6      	b.n	80030da <_svfiprintf_r+0xc6>
 800318c:	2300      	movs	r3, #0
 800318e:	3701      	adds	r7, #1
 8003190:	9305      	str	r3, [sp, #20]
 8003192:	4619      	mov	r1, r3
 8003194:	250a      	movs	r5, #10
 8003196:	4638      	mov	r0, r7
 8003198:	f810 2b01 	ldrb.w	r2, [r0], #1
 800319c:	3a30      	subs	r2, #48	; 0x30
 800319e:	2a09      	cmp	r2, #9
 80031a0:	d903      	bls.n	80031aa <_svfiprintf_r+0x196>
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d0c8      	beq.n	8003138 <_svfiprintf_r+0x124>
 80031a6:	9105      	str	r1, [sp, #20]
 80031a8:	e7c6      	b.n	8003138 <_svfiprintf_r+0x124>
 80031aa:	fb05 2101 	mla	r1, r5, r1, r2
 80031ae:	2301      	movs	r3, #1
 80031b0:	4607      	mov	r7, r0
 80031b2:	e7f0      	b.n	8003196 <_svfiprintf_r+0x182>
 80031b4:	ab03      	add	r3, sp, #12
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	4622      	mov	r2, r4
 80031ba:	4b11      	ldr	r3, [pc, #68]	; (8003200 <_svfiprintf_r+0x1ec>)
 80031bc:	a904      	add	r1, sp, #16
 80031be:	4640      	mov	r0, r8
 80031c0:	f3af 8000 	nop.w
 80031c4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80031c8:	4681      	mov	r9, r0
 80031ca:	d1d6      	bne.n	800317a <_svfiprintf_r+0x166>
 80031cc:	89a3      	ldrh	r3, [r4, #12]
 80031ce:	065b      	lsls	r3, r3, #25
 80031d0:	f53f af35 	bmi.w	800303e <_svfiprintf_r+0x2a>
 80031d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80031d6:	b01d      	add	sp, #116	; 0x74
 80031d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031dc:	ab03      	add	r3, sp, #12
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	4622      	mov	r2, r4
 80031e2:	4b07      	ldr	r3, [pc, #28]	; (8003200 <_svfiprintf_r+0x1ec>)
 80031e4:	a904      	add	r1, sp, #16
 80031e6:	4640      	mov	r0, r8
 80031e8:	f000 f882 	bl	80032f0 <_printf_i>
 80031ec:	e7ea      	b.n	80031c4 <_svfiprintf_r+0x1b0>
 80031ee:	bf00      	nop
 80031f0:	08003760 	.word	0x08003760
 80031f4:	08003766 	.word	0x08003766
 80031f8:	0800376a 	.word	0x0800376a
 80031fc:	00000000 	.word	0x00000000
 8003200:	08002f61 	.word	0x08002f61

08003204 <_printf_common>:
 8003204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003208:	4691      	mov	r9, r2
 800320a:	461f      	mov	r7, r3
 800320c:	688a      	ldr	r2, [r1, #8]
 800320e:	690b      	ldr	r3, [r1, #16]
 8003210:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003214:	4293      	cmp	r3, r2
 8003216:	bfb8      	it	lt
 8003218:	4613      	movlt	r3, r2
 800321a:	f8c9 3000 	str.w	r3, [r9]
 800321e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003222:	4606      	mov	r6, r0
 8003224:	460c      	mov	r4, r1
 8003226:	b112      	cbz	r2, 800322e <_printf_common+0x2a>
 8003228:	3301      	adds	r3, #1
 800322a:	f8c9 3000 	str.w	r3, [r9]
 800322e:	6823      	ldr	r3, [r4, #0]
 8003230:	0699      	lsls	r1, r3, #26
 8003232:	bf42      	ittt	mi
 8003234:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003238:	3302      	addmi	r3, #2
 800323a:	f8c9 3000 	strmi.w	r3, [r9]
 800323e:	6825      	ldr	r5, [r4, #0]
 8003240:	f015 0506 	ands.w	r5, r5, #6
 8003244:	d107      	bne.n	8003256 <_printf_common+0x52>
 8003246:	f104 0a19 	add.w	sl, r4, #25
 800324a:	68e3      	ldr	r3, [r4, #12]
 800324c:	f8d9 2000 	ldr.w	r2, [r9]
 8003250:	1a9b      	subs	r3, r3, r2
 8003252:	42ab      	cmp	r3, r5
 8003254:	dc28      	bgt.n	80032a8 <_printf_common+0xa4>
 8003256:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800325a:	6822      	ldr	r2, [r4, #0]
 800325c:	3300      	adds	r3, #0
 800325e:	bf18      	it	ne
 8003260:	2301      	movne	r3, #1
 8003262:	0692      	lsls	r2, r2, #26
 8003264:	d42d      	bmi.n	80032c2 <_printf_common+0xbe>
 8003266:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800326a:	4639      	mov	r1, r7
 800326c:	4630      	mov	r0, r6
 800326e:	47c0      	blx	r8
 8003270:	3001      	adds	r0, #1
 8003272:	d020      	beq.n	80032b6 <_printf_common+0xb2>
 8003274:	6823      	ldr	r3, [r4, #0]
 8003276:	68e5      	ldr	r5, [r4, #12]
 8003278:	f8d9 2000 	ldr.w	r2, [r9]
 800327c:	f003 0306 	and.w	r3, r3, #6
 8003280:	2b04      	cmp	r3, #4
 8003282:	bf08      	it	eq
 8003284:	1aad      	subeq	r5, r5, r2
 8003286:	68a3      	ldr	r3, [r4, #8]
 8003288:	6922      	ldr	r2, [r4, #16]
 800328a:	bf0c      	ite	eq
 800328c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003290:	2500      	movne	r5, #0
 8003292:	4293      	cmp	r3, r2
 8003294:	bfc4      	itt	gt
 8003296:	1a9b      	subgt	r3, r3, r2
 8003298:	18ed      	addgt	r5, r5, r3
 800329a:	f04f 0900 	mov.w	r9, #0
 800329e:	341a      	adds	r4, #26
 80032a0:	454d      	cmp	r5, r9
 80032a2:	d11a      	bne.n	80032da <_printf_common+0xd6>
 80032a4:	2000      	movs	r0, #0
 80032a6:	e008      	b.n	80032ba <_printf_common+0xb6>
 80032a8:	2301      	movs	r3, #1
 80032aa:	4652      	mov	r2, sl
 80032ac:	4639      	mov	r1, r7
 80032ae:	4630      	mov	r0, r6
 80032b0:	47c0      	blx	r8
 80032b2:	3001      	adds	r0, #1
 80032b4:	d103      	bne.n	80032be <_printf_common+0xba>
 80032b6:	f04f 30ff 	mov.w	r0, #4294967295
 80032ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032be:	3501      	adds	r5, #1
 80032c0:	e7c3      	b.n	800324a <_printf_common+0x46>
 80032c2:	18e1      	adds	r1, r4, r3
 80032c4:	1c5a      	adds	r2, r3, #1
 80032c6:	2030      	movs	r0, #48	; 0x30
 80032c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80032cc:	4422      	add	r2, r4
 80032ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80032d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80032d6:	3302      	adds	r3, #2
 80032d8:	e7c5      	b.n	8003266 <_printf_common+0x62>
 80032da:	2301      	movs	r3, #1
 80032dc:	4622      	mov	r2, r4
 80032de:	4639      	mov	r1, r7
 80032e0:	4630      	mov	r0, r6
 80032e2:	47c0      	blx	r8
 80032e4:	3001      	adds	r0, #1
 80032e6:	d0e6      	beq.n	80032b6 <_printf_common+0xb2>
 80032e8:	f109 0901 	add.w	r9, r9, #1
 80032ec:	e7d8      	b.n	80032a0 <_printf_common+0x9c>
	...

080032f0 <_printf_i>:
 80032f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80032f4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80032f8:	460c      	mov	r4, r1
 80032fa:	7e09      	ldrb	r1, [r1, #24]
 80032fc:	b085      	sub	sp, #20
 80032fe:	296e      	cmp	r1, #110	; 0x6e
 8003300:	4617      	mov	r7, r2
 8003302:	4606      	mov	r6, r0
 8003304:	4698      	mov	r8, r3
 8003306:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003308:	f000 80b3 	beq.w	8003472 <_printf_i+0x182>
 800330c:	d822      	bhi.n	8003354 <_printf_i+0x64>
 800330e:	2963      	cmp	r1, #99	; 0x63
 8003310:	d036      	beq.n	8003380 <_printf_i+0x90>
 8003312:	d80a      	bhi.n	800332a <_printf_i+0x3a>
 8003314:	2900      	cmp	r1, #0
 8003316:	f000 80b9 	beq.w	800348c <_printf_i+0x19c>
 800331a:	2958      	cmp	r1, #88	; 0x58
 800331c:	f000 8083 	beq.w	8003426 <_printf_i+0x136>
 8003320:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003324:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003328:	e032      	b.n	8003390 <_printf_i+0xa0>
 800332a:	2964      	cmp	r1, #100	; 0x64
 800332c:	d001      	beq.n	8003332 <_printf_i+0x42>
 800332e:	2969      	cmp	r1, #105	; 0x69
 8003330:	d1f6      	bne.n	8003320 <_printf_i+0x30>
 8003332:	6820      	ldr	r0, [r4, #0]
 8003334:	6813      	ldr	r3, [r2, #0]
 8003336:	0605      	lsls	r5, r0, #24
 8003338:	f103 0104 	add.w	r1, r3, #4
 800333c:	d52a      	bpl.n	8003394 <_printf_i+0xa4>
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6011      	str	r1, [r2, #0]
 8003342:	2b00      	cmp	r3, #0
 8003344:	da03      	bge.n	800334e <_printf_i+0x5e>
 8003346:	222d      	movs	r2, #45	; 0x2d
 8003348:	425b      	negs	r3, r3
 800334a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800334e:	486f      	ldr	r0, [pc, #444]	; (800350c <_printf_i+0x21c>)
 8003350:	220a      	movs	r2, #10
 8003352:	e039      	b.n	80033c8 <_printf_i+0xd8>
 8003354:	2973      	cmp	r1, #115	; 0x73
 8003356:	f000 809d 	beq.w	8003494 <_printf_i+0x1a4>
 800335a:	d808      	bhi.n	800336e <_printf_i+0x7e>
 800335c:	296f      	cmp	r1, #111	; 0x6f
 800335e:	d020      	beq.n	80033a2 <_printf_i+0xb2>
 8003360:	2970      	cmp	r1, #112	; 0x70
 8003362:	d1dd      	bne.n	8003320 <_printf_i+0x30>
 8003364:	6823      	ldr	r3, [r4, #0]
 8003366:	f043 0320 	orr.w	r3, r3, #32
 800336a:	6023      	str	r3, [r4, #0]
 800336c:	e003      	b.n	8003376 <_printf_i+0x86>
 800336e:	2975      	cmp	r1, #117	; 0x75
 8003370:	d017      	beq.n	80033a2 <_printf_i+0xb2>
 8003372:	2978      	cmp	r1, #120	; 0x78
 8003374:	d1d4      	bne.n	8003320 <_printf_i+0x30>
 8003376:	2378      	movs	r3, #120	; 0x78
 8003378:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800337c:	4864      	ldr	r0, [pc, #400]	; (8003510 <_printf_i+0x220>)
 800337e:	e055      	b.n	800342c <_printf_i+0x13c>
 8003380:	6813      	ldr	r3, [r2, #0]
 8003382:	1d19      	adds	r1, r3, #4
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6011      	str	r1, [r2, #0]
 8003388:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800338c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003390:	2301      	movs	r3, #1
 8003392:	e08c      	b.n	80034ae <_printf_i+0x1be>
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6011      	str	r1, [r2, #0]
 8003398:	f010 0f40 	tst.w	r0, #64	; 0x40
 800339c:	bf18      	it	ne
 800339e:	b21b      	sxthne	r3, r3
 80033a0:	e7cf      	b.n	8003342 <_printf_i+0x52>
 80033a2:	6813      	ldr	r3, [r2, #0]
 80033a4:	6825      	ldr	r5, [r4, #0]
 80033a6:	1d18      	adds	r0, r3, #4
 80033a8:	6010      	str	r0, [r2, #0]
 80033aa:	0628      	lsls	r0, r5, #24
 80033ac:	d501      	bpl.n	80033b2 <_printf_i+0xc2>
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	e002      	b.n	80033b8 <_printf_i+0xc8>
 80033b2:	0668      	lsls	r0, r5, #25
 80033b4:	d5fb      	bpl.n	80033ae <_printf_i+0xbe>
 80033b6:	881b      	ldrh	r3, [r3, #0]
 80033b8:	4854      	ldr	r0, [pc, #336]	; (800350c <_printf_i+0x21c>)
 80033ba:	296f      	cmp	r1, #111	; 0x6f
 80033bc:	bf14      	ite	ne
 80033be:	220a      	movne	r2, #10
 80033c0:	2208      	moveq	r2, #8
 80033c2:	2100      	movs	r1, #0
 80033c4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80033c8:	6865      	ldr	r5, [r4, #4]
 80033ca:	60a5      	str	r5, [r4, #8]
 80033cc:	2d00      	cmp	r5, #0
 80033ce:	f2c0 8095 	blt.w	80034fc <_printf_i+0x20c>
 80033d2:	6821      	ldr	r1, [r4, #0]
 80033d4:	f021 0104 	bic.w	r1, r1, #4
 80033d8:	6021      	str	r1, [r4, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d13d      	bne.n	800345a <_printf_i+0x16a>
 80033de:	2d00      	cmp	r5, #0
 80033e0:	f040 808e 	bne.w	8003500 <_printf_i+0x210>
 80033e4:	4665      	mov	r5, ip
 80033e6:	2a08      	cmp	r2, #8
 80033e8:	d10b      	bne.n	8003402 <_printf_i+0x112>
 80033ea:	6823      	ldr	r3, [r4, #0]
 80033ec:	07db      	lsls	r3, r3, #31
 80033ee:	d508      	bpl.n	8003402 <_printf_i+0x112>
 80033f0:	6923      	ldr	r3, [r4, #16]
 80033f2:	6862      	ldr	r2, [r4, #4]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	bfde      	ittt	le
 80033f8:	2330      	movle	r3, #48	; 0x30
 80033fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80033fe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003402:	ebac 0305 	sub.w	r3, ip, r5
 8003406:	6123      	str	r3, [r4, #16]
 8003408:	f8cd 8000 	str.w	r8, [sp]
 800340c:	463b      	mov	r3, r7
 800340e:	aa03      	add	r2, sp, #12
 8003410:	4621      	mov	r1, r4
 8003412:	4630      	mov	r0, r6
 8003414:	f7ff fef6 	bl	8003204 <_printf_common>
 8003418:	3001      	adds	r0, #1
 800341a:	d14d      	bne.n	80034b8 <_printf_i+0x1c8>
 800341c:	f04f 30ff 	mov.w	r0, #4294967295
 8003420:	b005      	add	sp, #20
 8003422:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003426:	4839      	ldr	r0, [pc, #228]	; (800350c <_printf_i+0x21c>)
 8003428:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800342c:	6813      	ldr	r3, [r2, #0]
 800342e:	6821      	ldr	r1, [r4, #0]
 8003430:	1d1d      	adds	r5, r3, #4
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6015      	str	r5, [r2, #0]
 8003436:	060a      	lsls	r2, r1, #24
 8003438:	d50b      	bpl.n	8003452 <_printf_i+0x162>
 800343a:	07ca      	lsls	r2, r1, #31
 800343c:	bf44      	itt	mi
 800343e:	f041 0120 	orrmi.w	r1, r1, #32
 8003442:	6021      	strmi	r1, [r4, #0]
 8003444:	b91b      	cbnz	r3, 800344e <_printf_i+0x15e>
 8003446:	6822      	ldr	r2, [r4, #0]
 8003448:	f022 0220 	bic.w	r2, r2, #32
 800344c:	6022      	str	r2, [r4, #0]
 800344e:	2210      	movs	r2, #16
 8003450:	e7b7      	b.n	80033c2 <_printf_i+0xd2>
 8003452:	064d      	lsls	r5, r1, #25
 8003454:	bf48      	it	mi
 8003456:	b29b      	uxthmi	r3, r3
 8003458:	e7ef      	b.n	800343a <_printf_i+0x14a>
 800345a:	4665      	mov	r5, ip
 800345c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003460:	fb02 3311 	mls	r3, r2, r1, r3
 8003464:	5cc3      	ldrb	r3, [r0, r3]
 8003466:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800346a:	460b      	mov	r3, r1
 800346c:	2900      	cmp	r1, #0
 800346e:	d1f5      	bne.n	800345c <_printf_i+0x16c>
 8003470:	e7b9      	b.n	80033e6 <_printf_i+0xf6>
 8003472:	6813      	ldr	r3, [r2, #0]
 8003474:	6825      	ldr	r5, [r4, #0]
 8003476:	6961      	ldr	r1, [r4, #20]
 8003478:	1d18      	adds	r0, r3, #4
 800347a:	6010      	str	r0, [r2, #0]
 800347c:	0628      	lsls	r0, r5, #24
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	d501      	bpl.n	8003486 <_printf_i+0x196>
 8003482:	6019      	str	r1, [r3, #0]
 8003484:	e002      	b.n	800348c <_printf_i+0x19c>
 8003486:	066a      	lsls	r2, r5, #25
 8003488:	d5fb      	bpl.n	8003482 <_printf_i+0x192>
 800348a:	8019      	strh	r1, [r3, #0]
 800348c:	2300      	movs	r3, #0
 800348e:	6123      	str	r3, [r4, #16]
 8003490:	4665      	mov	r5, ip
 8003492:	e7b9      	b.n	8003408 <_printf_i+0x118>
 8003494:	6813      	ldr	r3, [r2, #0]
 8003496:	1d19      	adds	r1, r3, #4
 8003498:	6011      	str	r1, [r2, #0]
 800349a:	681d      	ldr	r5, [r3, #0]
 800349c:	6862      	ldr	r2, [r4, #4]
 800349e:	2100      	movs	r1, #0
 80034a0:	4628      	mov	r0, r5
 80034a2:	f7fc fea5 	bl	80001f0 <memchr>
 80034a6:	b108      	cbz	r0, 80034ac <_printf_i+0x1bc>
 80034a8:	1b40      	subs	r0, r0, r5
 80034aa:	6060      	str	r0, [r4, #4]
 80034ac:	6863      	ldr	r3, [r4, #4]
 80034ae:	6123      	str	r3, [r4, #16]
 80034b0:	2300      	movs	r3, #0
 80034b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034b6:	e7a7      	b.n	8003408 <_printf_i+0x118>
 80034b8:	6923      	ldr	r3, [r4, #16]
 80034ba:	462a      	mov	r2, r5
 80034bc:	4639      	mov	r1, r7
 80034be:	4630      	mov	r0, r6
 80034c0:	47c0      	blx	r8
 80034c2:	3001      	adds	r0, #1
 80034c4:	d0aa      	beq.n	800341c <_printf_i+0x12c>
 80034c6:	6823      	ldr	r3, [r4, #0]
 80034c8:	079b      	lsls	r3, r3, #30
 80034ca:	d413      	bmi.n	80034f4 <_printf_i+0x204>
 80034cc:	68e0      	ldr	r0, [r4, #12]
 80034ce:	9b03      	ldr	r3, [sp, #12]
 80034d0:	4298      	cmp	r0, r3
 80034d2:	bfb8      	it	lt
 80034d4:	4618      	movlt	r0, r3
 80034d6:	e7a3      	b.n	8003420 <_printf_i+0x130>
 80034d8:	2301      	movs	r3, #1
 80034da:	464a      	mov	r2, r9
 80034dc:	4639      	mov	r1, r7
 80034de:	4630      	mov	r0, r6
 80034e0:	47c0      	blx	r8
 80034e2:	3001      	adds	r0, #1
 80034e4:	d09a      	beq.n	800341c <_printf_i+0x12c>
 80034e6:	3501      	adds	r5, #1
 80034e8:	68e3      	ldr	r3, [r4, #12]
 80034ea:	9a03      	ldr	r2, [sp, #12]
 80034ec:	1a9b      	subs	r3, r3, r2
 80034ee:	42ab      	cmp	r3, r5
 80034f0:	dcf2      	bgt.n	80034d8 <_printf_i+0x1e8>
 80034f2:	e7eb      	b.n	80034cc <_printf_i+0x1dc>
 80034f4:	2500      	movs	r5, #0
 80034f6:	f104 0919 	add.w	r9, r4, #25
 80034fa:	e7f5      	b.n	80034e8 <_printf_i+0x1f8>
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1ac      	bne.n	800345a <_printf_i+0x16a>
 8003500:	7803      	ldrb	r3, [r0, #0]
 8003502:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003506:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800350a:	e76c      	b.n	80033e6 <_printf_i+0xf6>
 800350c:	08003771 	.word	0x08003771
 8003510:	08003782 	.word	0x08003782

08003514 <memcpy>:
 8003514:	b510      	push	{r4, lr}
 8003516:	1e43      	subs	r3, r0, #1
 8003518:	440a      	add	r2, r1
 800351a:	4291      	cmp	r1, r2
 800351c:	d100      	bne.n	8003520 <memcpy+0xc>
 800351e:	bd10      	pop	{r4, pc}
 8003520:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003524:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003528:	e7f7      	b.n	800351a <memcpy+0x6>

0800352a <memmove>:
 800352a:	4288      	cmp	r0, r1
 800352c:	b510      	push	{r4, lr}
 800352e:	eb01 0302 	add.w	r3, r1, r2
 8003532:	d807      	bhi.n	8003544 <memmove+0x1a>
 8003534:	1e42      	subs	r2, r0, #1
 8003536:	4299      	cmp	r1, r3
 8003538:	d00a      	beq.n	8003550 <memmove+0x26>
 800353a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800353e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003542:	e7f8      	b.n	8003536 <memmove+0xc>
 8003544:	4283      	cmp	r3, r0
 8003546:	d9f5      	bls.n	8003534 <memmove+0xa>
 8003548:	1881      	adds	r1, r0, r2
 800354a:	1ad2      	subs	r2, r2, r3
 800354c:	42d3      	cmn	r3, r2
 800354e:	d100      	bne.n	8003552 <memmove+0x28>
 8003550:	bd10      	pop	{r4, pc}
 8003552:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003556:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800355a:	e7f7      	b.n	800354c <memmove+0x22>

0800355c <_free_r>:
 800355c:	b538      	push	{r3, r4, r5, lr}
 800355e:	4605      	mov	r5, r0
 8003560:	2900      	cmp	r1, #0
 8003562:	d045      	beq.n	80035f0 <_free_r+0x94>
 8003564:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003568:	1f0c      	subs	r4, r1, #4
 800356a:	2b00      	cmp	r3, #0
 800356c:	bfb8      	it	lt
 800356e:	18e4      	addlt	r4, r4, r3
 8003570:	f000 f8d2 	bl	8003718 <__malloc_lock>
 8003574:	4a1f      	ldr	r2, [pc, #124]	; (80035f4 <_free_r+0x98>)
 8003576:	6813      	ldr	r3, [r2, #0]
 8003578:	4610      	mov	r0, r2
 800357a:	b933      	cbnz	r3, 800358a <_free_r+0x2e>
 800357c:	6063      	str	r3, [r4, #4]
 800357e:	6014      	str	r4, [r2, #0]
 8003580:	4628      	mov	r0, r5
 8003582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003586:	f000 b8c8 	b.w	800371a <__malloc_unlock>
 800358a:	42a3      	cmp	r3, r4
 800358c:	d90c      	bls.n	80035a8 <_free_r+0x4c>
 800358e:	6821      	ldr	r1, [r4, #0]
 8003590:	1862      	adds	r2, r4, r1
 8003592:	4293      	cmp	r3, r2
 8003594:	bf04      	itt	eq
 8003596:	681a      	ldreq	r2, [r3, #0]
 8003598:	685b      	ldreq	r3, [r3, #4]
 800359a:	6063      	str	r3, [r4, #4]
 800359c:	bf04      	itt	eq
 800359e:	1852      	addeq	r2, r2, r1
 80035a0:	6022      	streq	r2, [r4, #0]
 80035a2:	6004      	str	r4, [r0, #0]
 80035a4:	e7ec      	b.n	8003580 <_free_r+0x24>
 80035a6:	4613      	mov	r3, r2
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	b10a      	cbz	r2, 80035b0 <_free_r+0x54>
 80035ac:	42a2      	cmp	r2, r4
 80035ae:	d9fa      	bls.n	80035a6 <_free_r+0x4a>
 80035b0:	6819      	ldr	r1, [r3, #0]
 80035b2:	1858      	adds	r0, r3, r1
 80035b4:	42a0      	cmp	r0, r4
 80035b6:	d10b      	bne.n	80035d0 <_free_r+0x74>
 80035b8:	6820      	ldr	r0, [r4, #0]
 80035ba:	4401      	add	r1, r0
 80035bc:	1858      	adds	r0, r3, r1
 80035be:	4282      	cmp	r2, r0
 80035c0:	6019      	str	r1, [r3, #0]
 80035c2:	d1dd      	bne.n	8003580 <_free_r+0x24>
 80035c4:	6810      	ldr	r0, [r2, #0]
 80035c6:	6852      	ldr	r2, [r2, #4]
 80035c8:	605a      	str	r2, [r3, #4]
 80035ca:	4401      	add	r1, r0
 80035cc:	6019      	str	r1, [r3, #0]
 80035ce:	e7d7      	b.n	8003580 <_free_r+0x24>
 80035d0:	d902      	bls.n	80035d8 <_free_r+0x7c>
 80035d2:	230c      	movs	r3, #12
 80035d4:	602b      	str	r3, [r5, #0]
 80035d6:	e7d3      	b.n	8003580 <_free_r+0x24>
 80035d8:	6820      	ldr	r0, [r4, #0]
 80035da:	1821      	adds	r1, r4, r0
 80035dc:	428a      	cmp	r2, r1
 80035de:	bf04      	itt	eq
 80035e0:	6811      	ldreq	r1, [r2, #0]
 80035e2:	6852      	ldreq	r2, [r2, #4]
 80035e4:	6062      	str	r2, [r4, #4]
 80035e6:	bf04      	itt	eq
 80035e8:	1809      	addeq	r1, r1, r0
 80035ea:	6021      	streq	r1, [r4, #0]
 80035ec:	605c      	str	r4, [r3, #4]
 80035ee:	e7c7      	b.n	8003580 <_free_r+0x24>
 80035f0:	bd38      	pop	{r3, r4, r5, pc}
 80035f2:	bf00      	nop
 80035f4:	20000090 	.word	0x20000090

080035f8 <_malloc_r>:
 80035f8:	b570      	push	{r4, r5, r6, lr}
 80035fa:	1ccd      	adds	r5, r1, #3
 80035fc:	f025 0503 	bic.w	r5, r5, #3
 8003600:	3508      	adds	r5, #8
 8003602:	2d0c      	cmp	r5, #12
 8003604:	bf38      	it	cc
 8003606:	250c      	movcc	r5, #12
 8003608:	2d00      	cmp	r5, #0
 800360a:	4606      	mov	r6, r0
 800360c:	db01      	blt.n	8003612 <_malloc_r+0x1a>
 800360e:	42a9      	cmp	r1, r5
 8003610:	d903      	bls.n	800361a <_malloc_r+0x22>
 8003612:	230c      	movs	r3, #12
 8003614:	6033      	str	r3, [r6, #0]
 8003616:	2000      	movs	r0, #0
 8003618:	bd70      	pop	{r4, r5, r6, pc}
 800361a:	f000 f87d 	bl	8003718 <__malloc_lock>
 800361e:	4a21      	ldr	r2, [pc, #132]	; (80036a4 <_malloc_r+0xac>)
 8003620:	6814      	ldr	r4, [r2, #0]
 8003622:	4621      	mov	r1, r4
 8003624:	b991      	cbnz	r1, 800364c <_malloc_r+0x54>
 8003626:	4c20      	ldr	r4, [pc, #128]	; (80036a8 <_malloc_r+0xb0>)
 8003628:	6823      	ldr	r3, [r4, #0]
 800362a:	b91b      	cbnz	r3, 8003634 <_malloc_r+0x3c>
 800362c:	4630      	mov	r0, r6
 800362e:	f000 f863 	bl	80036f8 <_sbrk_r>
 8003632:	6020      	str	r0, [r4, #0]
 8003634:	4629      	mov	r1, r5
 8003636:	4630      	mov	r0, r6
 8003638:	f000 f85e 	bl	80036f8 <_sbrk_r>
 800363c:	1c43      	adds	r3, r0, #1
 800363e:	d124      	bne.n	800368a <_malloc_r+0x92>
 8003640:	230c      	movs	r3, #12
 8003642:	6033      	str	r3, [r6, #0]
 8003644:	4630      	mov	r0, r6
 8003646:	f000 f868 	bl	800371a <__malloc_unlock>
 800364a:	e7e4      	b.n	8003616 <_malloc_r+0x1e>
 800364c:	680b      	ldr	r3, [r1, #0]
 800364e:	1b5b      	subs	r3, r3, r5
 8003650:	d418      	bmi.n	8003684 <_malloc_r+0x8c>
 8003652:	2b0b      	cmp	r3, #11
 8003654:	d90f      	bls.n	8003676 <_malloc_r+0x7e>
 8003656:	600b      	str	r3, [r1, #0]
 8003658:	50cd      	str	r5, [r1, r3]
 800365a:	18cc      	adds	r4, r1, r3
 800365c:	4630      	mov	r0, r6
 800365e:	f000 f85c 	bl	800371a <__malloc_unlock>
 8003662:	f104 000b 	add.w	r0, r4, #11
 8003666:	1d23      	adds	r3, r4, #4
 8003668:	f020 0007 	bic.w	r0, r0, #7
 800366c:	1ac3      	subs	r3, r0, r3
 800366e:	d0d3      	beq.n	8003618 <_malloc_r+0x20>
 8003670:	425a      	negs	r2, r3
 8003672:	50e2      	str	r2, [r4, r3]
 8003674:	e7d0      	b.n	8003618 <_malloc_r+0x20>
 8003676:	428c      	cmp	r4, r1
 8003678:	684b      	ldr	r3, [r1, #4]
 800367a:	bf16      	itet	ne
 800367c:	6063      	strne	r3, [r4, #4]
 800367e:	6013      	streq	r3, [r2, #0]
 8003680:	460c      	movne	r4, r1
 8003682:	e7eb      	b.n	800365c <_malloc_r+0x64>
 8003684:	460c      	mov	r4, r1
 8003686:	6849      	ldr	r1, [r1, #4]
 8003688:	e7cc      	b.n	8003624 <_malloc_r+0x2c>
 800368a:	1cc4      	adds	r4, r0, #3
 800368c:	f024 0403 	bic.w	r4, r4, #3
 8003690:	42a0      	cmp	r0, r4
 8003692:	d005      	beq.n	80036a0 <_malloc_r+0xa8>
 8003694:	1a21      	subs	r1, r4, r0
 8003696:	4630      	mov	r0, r6
 8003698:	f000 f82e 	bl	80036f8 <_sbrk_r>
 800369c:	3001      	adds	r0, #1
 800369e:	d0cf      	beq.n	8003640 <_malloc_r+0x48>
 80036a0:	6025      	str	r5, [r4, #0]
 80036a2:	e7db      	b.n	800365c <_malloc_r+0x64>
 80036a4:	20000090 	.word	0x20000090
 80036a8:	20000094 	.word	0x20000094

080036ac <_realloc_r>:
 80036ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ae:	4607      	mov	r7, r0
 80036b0:	4614      	mov	r4, r2
 80036b2:	460e      	mov	r6, r1
 80036b4:	b921      	cbnz	r1, 80036c0 <_realloc_r+0x14>
 80036b6:	4611      	mov	r1, r2
 80036b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80036bc:	f7ff bf9c 	b.w	80035f8 <_malloc_r>
 80036c0:	b922      	cbnz	r2, 80036cc <_realloc_r+0x20>
 80036c2:	f7ff ff4b 	bl	800355c <_free_r>
 80036c6:	4625      	mov	r5, r4
 80036c8:	4628      	mov	r0, r5
 80036ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036cc:	f000 f826 	bl	800371c <_malloc_usable_size_r>
 80036d0:	42a0      	cmp	r0, r4
 80036d2:	d20f      	bcs.n	80036f4 <_realloc_r+0x48>
 80036d4:	4621      	mov	r1, r4
 80036d6:	4638      	mov	r0, r7
 80036d8:	f7ff ff8e 	bl	80035f8 <_malloc_r>
 80036dc:	4605      	mov	r5, r0
 80036de:	2800      	cmp	r0, #0
 80036e0:	d0f2      	beq.n	80036c8 <_realloc_r+0x1c>
 80036e2:	4631      	mov	r1, r6
 80036e4:	4622      	mov	r2, r4
 80036e6:	f7ff ff15 	bl	8003514 <memcpy>
 80036ea:	4631      	mov	r1, r6
 80036ec:	4638      	mov	r0, r7
 80036ee:	f7ff ff35 	bl	800355c <_free_r>
 80036f2:	e7e9      	b.n	80036c8 <_realloc_r+0x1c>
 80036f4:	4635      	mov	r5, r6
 80036f6:	e7e7      	b.n	80036c8 <_realloc_r+0x1c>

080036f8 <_sbrk_r>:
 80036f8:	b538      	push	{r3, r4, r5, lr}
 80036fa:	4c06      	ldr	r4, [pc, #24]	; (8003714 <_sbrk_r+0x1c>)
 80036fc:	2300      	movs	r3, #0
 80036fe:	4605      	mov	r5, r0
 8003700:	4608      	mov	r0, r1
 8003702:	6023      	str	r3, [r4, #0]
 8003704:	f7ff fb4e 	bl	8002da4 <_sbrk>
 8003708:	1c43      	adds	r3, r0, #1
 800370a:	d102      	bne.n	8003712 <_sbrk_r+0x1a>
 800370c:	6823      	ldr	r3, [r4, #0]
 800370e:	b103      	cbz	r3, 8003712 <_sbrk_r+0x1a>
 8003710:	602b      	str	r3, [r5, #0]
 8003712:	bd38      	pop	{r3, r4, r5, pc}
 8003714:	20000164 	.word	0x20000164

08003718 <__malloc_lock>:
 8003718:	4770      	bx	lr

0800371a <__malloc_unlock>:
 800371a:	4770      	bx	lr

0800371c <_malloc_usable_size_r>:
 800371c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003720:	1f18      	subs	r0, r3, #4
 8003722:	2b00      	cmp	r3, #0
 8003724:	bfbc      	itt	lt
 8003726:	580b      	ldrlt	r3, [r1, r0]
 8003728:	18c0      	addlt	r0, r0, r3
 800372a:	4770      	bx	lr

0800372c <_init>:
 800372c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800372e:	bf00      	nop
 8003730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003732:	bc08      	pop	{r3}
 8003734:	469e      	mov	lr, r3
 8003736:	4770      	bx	lr

08003738 <_fini>:
 8003738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800373a:	bf00      	nop
 800373c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800373e:	bc08      	pop	{r3}
 8003740:	469e      	mov	lr, r3
 8003742:	4770      	bx	lr
